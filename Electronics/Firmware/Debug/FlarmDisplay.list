
FlarmDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000912a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001567  00000000  00000000  00029166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000688  00000000  00000000  0002a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000600  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e5a6  00000000  00000000  0002b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009277  00000000  00000000  000498fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5467  00000000  00000000  00052b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00107fdc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001900  00000000  00000000  0010802c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800334c 	.word	0x0800334c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800334c 	.word	0x0800334c

080001c8 <serializeLEDRegister>:
 *      Author: lachlan
 */

#include "flarm.h"

void serializeLEDRegister(struct LEDRegister *reg) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	reg->Buffer = 0;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2200      	movs	r2, #0
 80001d4:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y08 << 31;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	7812      	ldrb	r2, [r2, #0]
 80001de:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	07d2      	lsls	r2, r2, #31
 80001e6:	431a      	orrs	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R08 << 30;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	687a      	ldr	r2, [r7, #4]
 80001f2:	7892      	ldrb	r2, [r2, #2]
 80001f4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80001f8:	b2d2      	uxtb	r2, r2
 80001fa:	0792      	lsls	r2, r2, #30
 80001fc:	431a      	orrs	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y07 << 29;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	7812      	ldrb	r2, [r2, #0]
 800020a:	f3c2 1280 	ubfx	r2, r2, #6, #1
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	0752      	lsls	r2, r2, #29
 8000212:	431a      	orrs	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R07 << 28;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	7892      	ldrb	r2, [r2, #2]
 8000220:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	0712      	lsls	r2, r2, #28
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y06 << 27;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	7812      	ldrb	r2, [r2, #0]
 8000236:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800023a:	b2d2      	uxtb	r2, r2
 800023c:	06d2      	lsls	r2, r2, #27
 800023e:	431a      	orrs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R06 << 26;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	7892      	ldrb	r2, [r2, #2]
 800024c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	0692      	lsls	r2, r2, #26
 8000254:	431a      	orrs	r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y05 << 25;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	7812      	ldrb	r2, [r2, #0]
 8000262:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	0652      	lsls	r2, r2, #25
 800026a:	431a      	orrs	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R05 << 24;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	7892      	ldrb	r2, [r2, #2]
 8000278:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	0612      	lsls	r2, r2, #24
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y04 << 23;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	05d2      	lsls	r2, r2, #23
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R04 << 22;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	7852      	ldrb	r2, [r2, #1]
 80002a4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	0592      	lsls	r2, r2, #22
 80002ac:	431a      	orrs	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->LL 	<< 21;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	78d2      	ldrb	r2, [r2, #3]
 80002ba:	f3c2 0200 	ubfx	r2, r2, #0, #1
 80002be:	b2d2      	uxtb	r2, r2
 80002c0:	0552      	lsls	r2, r2, #21
 80002c2:	431a      	orrs	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->L 	<< 20;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	78d2      	ldrb	r2, [r2, #3]
 80002d0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	0512      	lsls	r2, r2, #20
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->M 	<< 19;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	78d2      	ldrb	r2, [r2, #3]
 80002e6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	04d2      	lsls	r2, r2, #19
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->H 	<< 18;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	78d2      	ldrb	r2, [r2, #3]
 80002fc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	0492      	lsls	r2, r2, #18
 8000304:	431a      	orrs	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->HH 	<< 17;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	78d2      	ldrb	r2, [r2, #3]
 8000312:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	0452      	lsls	r2, r2, #17
 800031a:	431a      	orrs	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y03 << 16;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	0412      	lsls	r2, r2, #16
 8000330:	431a      	orrs	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R03 << 15;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7852      	ldrb	r2, [r2, #1]
 800033e:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	03d2      	lsls	r2, r2, #15
 8000346:	431a      	orrs	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y02 << 14;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	7812      	ldrb	r2, [r2, #0]
 8000354:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	0392      	lsls	r2, r2, #14
 800035c:	431a      	orrs	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R02 << 13;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	7852      	ldrb	r2, [r2, #1]
 800036a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800036e:	b2d2      	uxtb	r2, r2
 8000370:	0352      	lsls	r2, r2, #13
 8000372:	431a      	orrs	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y01 << 12;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	7812      	ldrb	r2, [r2, #0]
 8000380:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	0312      	lsls	r2, r2, #12
 8000388:	431a      	orrs	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R01 << 11;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	7852      	ldrb	r2, [r2, #1]
 8000396:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	02d2      	lsls	r2, r2, #11
 800039e:	431a      	orrs	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y12 << 10;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	7852      	ldrb	r2, [r2, #1]
 80003ac:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	0292      	lsls	r2, r2, #10
 80003b4:	431a      	orrs	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R12 << 9;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	7892      	ldrb	r2, [r2, #2]
 80003c2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80003c6:	b2d2      	uxtb	r2, r2
 80003c8:	0252      	lsls	r2, r2, #9
 80003ca:	431a      	orrs	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y11 << 8;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	7852      	ldrb	r2, [r2, #1]
 80003d8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80003dc:	b2d2      	uxtb	r2, r2
 80003de:	0212      	lsls	r2, r2, #8
 80003e0:	431a      	orrs	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R11 << 7;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	7892      	ldrb	r2, [r2, #2]
 80003ee:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80003f2:	b2d2      	uxtb	r2, r2
 80003f4:	01d2      	lsls	r2, r2, #7
 80003f6:	431a      	orrs	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y10 << 6;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	7852      	ldrb	r2, [r2, #1]
 8000404:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8000408:	b2d2      	uxtb	r2, r2
 800040a:	0192      	lsls	r2, r2, #6
 800040c:	431a      	orrs	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R10 << 5;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7892      	ldrb	r2, [r2, #2]
 800041a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800041e:	b2d2      	uxtb	r2, r2
 8000420:	0152      	lsls	r2, r2, #5
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->Y09 << 4;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7852      	ldrb	r2, [r2, #1]
 8000430:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8000434:	b2d2      	uxtb	r2, r2
 8000436:	0112      	lsls	r2, r2, #4
 8000438:	431a      	orrs	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->R09 << 3;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7892      	ldrb	r2, [r2, #2]
 8000446:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	00d2      	lsls	r2, r2, #3
 800044e:	431a      	orrs	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->TX 	<< 2;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	78d2      	ldrb	r2, [r2, #3]
 800045c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	0092      	lsls	r2, r2, #2
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->RX 	<< 1;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	78d2      	ldrb	r2, [r2, #3]
 8000472:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8000476:	b2d2      	uxtb	r2, r2
 8000478:	0052      	lsls	r2, r2, #1
 800047a:	431a      	orrs	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	605a      	str	r2, [r3, #4]
	reg->Buffer |= reg->GPS << 0;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	78d2      	ldrb	r2, [r2, #3]
 8000488:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	431a      	orrs	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	605a      	str	r2, [r3, #4]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <clearLEDRegister>:

void clearLEDRegister(struct LEDRegister *reg) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	memset(reg, 0, sizeof(*reg));
 80004a8:	2208      	movs	r2, #8
 80004aa:	2100      	movs	r1, #0
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f002 ff45 	bl	800333c <memset>
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c2:	f000 fca9 	bl	8000e18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c6:	f000 fa3b 	bl	8000940 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ca:	f000 faf7 	bl	8000abc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80004ce:	f000 fa95 	bl	80009fc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80004d2:	f000 fac3 	bl	8000a5c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t startMsg[] = "Starting...";
 80004d6:	4acd      	ldr	r2, [pc, #820]	; (800080c <main+0x350>)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	ca07      	ldmia	r2, {r0, r1, r2}
 80004dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, startMsg, sizeof(startMsg), 10);
 80004e0:	1d39      	adds	r1, r7, #4
 80004e2:	230a      	movs	r3, #10
 80004e4:	220c      	movs	r2, #12
 80004e6:	48ca      	ldr	r0, [pc, #808]	; (8000810 <main+0x354>)
 80004e8:	f002 fb8a 	bl	8002c00 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		LEDreg.R01 = 1;
 80004ec:	4ac9      	ldr	r2, [pc, #804]	; (8000814 <main+0x358>)
 80004ee:	7853      	ldrb	r3, [r2, #1]
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 80004f6:	48c7      	ldr	r0, [pc, #796]	; (8000814 <main+0x358>)
 80004f8:	f7ff fe66 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80004fc:	48c5      	ldr	r0, [pc, #788]	; (8000814 <main+0x358>)
 80004fe:	f000 fb3d 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000502:	48c4      	ldr	r0, [pc, #784]	; (8000814 <main+0x358>)
 8000504:	f7ff ffcc 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fceb 	bl	8000ee4 <HAL_Delay>
		LEDreg.R02 = 1;
 800050e:	4ac1      	ldr	r2, [pc, #772]	; (8000814 <main+0x358>)
 8000510:	7853      	ldrb	r3, [r2, #1]
 8000512:	f043 0320 	orr.w	r3, r3, #32
 8000516:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 8000518:	48be      	ldr	r0, [pc, #760]	; (8000814 <main+0x358>)
 800051a:	f7ff fe55 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800051e:	48bd      	ldr	r0, [pc, #756]	; (8000814 <main+0x358>)
 8000520:	f000 fb2c 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000524:	48bb      	ldr	r0, [pc, #748]	; (8000814 <main+0x358>)
 8000526:	f7ff ffbb 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800052a:	2064      	movs	r0, #100	; 0x64
 800052c:	f000 fcda 	bl	8000ee4 <HAL_Delay>
		LEDreg.R03 = 1;
 8000530:	4ab8      	ldr	r2, [pc, #736]	; (8000814 <main+0x358>)
 8000532:	7853      	ldrb	r3, [r2, #1]
 8000534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000538:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 800053a:	48b6      	ldr	r0, [pc, #728]	; (8000814 <main+0x358>)
 800053c:	f7ff fe44 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000540:	48b4      	ldr	r0, [pc, #720]	; (8000814 <main+0x358>)
 8000542:	f000 fb1b 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000546:	48b3      	ldr	r0, [pc, #716]	; (8000814 <main+0x358>)
 8000548:	f7ff ffaa 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f000 fcc9 	bl	8000ee4 <HAL_Delay>
		LEDreg.R04 = 1;
 8000552:	4ab0      	ldr	r2, [pc, #704]	; (8000814 <main+0x358>)
 8000554:	7853      	ldrb	r3, [r2, #1]
 8000556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055a:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 800055c:	48ad      	ldr	r0, [pc, #692]	; (8000814 <main+0x358>)
 800055e:	f7ff fe33 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000562:	48ac      	ldr	r0, [pc, #688]	; (8000814 <main+0x358>)
 8000564:	f000 fb0a 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000568:	48aa      	ldr	r0, [pc, #680]	; (8000814 <main+0x358>)
 800056a:	f7ff ff99 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fcb8 	bl	8000ee4 <HAL_Delay>
		LEDreg.R05 = 1;
 8000574:	4aa7      	ldr	r2, [pc, #668]	; (8000814 <main+0x358>)
 8000576:	7893      	ldrb	r3, [r2, #2]
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 800057e:	48a5      	ldr	r0, [pc, #660]	; (8000814 <main+0x358>)
 8000580:	f7ff fe22 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000584:	48a3      	ldr	r0, [pc, #652]	; (8000814 <main+0x358>)
 8000586:	f000 faf9 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 800058a:	48a2      	ldr	r0, [pc, #648]	; (8000814 <main+0x358>)
 800058c:	f7ff ff88 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000590:	2064      	movs	r0, #100	; 0x64
 8000592:	f000 fca7 	bl	8000ee4 <HAL_Delay>
		LEDreg.R06 = 1;
 8000596:	4a9f      	ldr	r2, [pc, #636]	; (8000814 <main+0x358>)
 8000598:	7893      	ldrb	r3, [r2, #2]
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 80005a0:	489c      	ldr	r0, [pc, #624]	; (8000814 <main+0x358>)
 80005a2:	f7ff fe11 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80005a6:	489b      	ldr	r0, [pc, #620]	; (8000814 <main+0x358>)
 80005a8:	f000 fae8 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80005ac:	4899      	ldr	r0, [pc, #612]	; (8000814 <main+0x358>)
 80005ae:	f7ff ff77 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80005b2:	2064      	movs	r0, #100	; 0x64
 80005b4:	f000 fc96 	bl	8000ee4 <HAL_Delay>
		LEDreg.R07 = 1;
 80005b8:	4a96      	ldr	r2, [pc, #600]	; (8000814 <main+0x358>)
 80005ba:	7893      	ldrb	r3, [r2, #2]
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 80005c2:	4894      	ldr	r0, [pc, #592]	; (8000814 <main+0x358>)
 80005c4:	f7ff fe00 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80005c8:	4892      	ldr	r0, [pc, #584]	; (8000814 <main+0x358>)
 80005ca:	f000 fad7 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80005ce:	4891      	ldr	r0, [pc, #580]	; (8000814 <main+0x358>)
 80005d0:	f7ff ff66 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	; 0x64
 80005d6:	f000 fc85 	bl	8000ee4 <HAL_Delay>
		LEDreg.R08 = 1;
 80005da:	4a8e      	ldr	r2, [pc, #568]	; (8000814 <main+0x358>)
 80005dc:	7893      	ldrb	r3, [r2, #2]
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 80005e4:	488b      	ldr	r0, [pc, #556]	; (8000814 <main+0x358>)
 80005e6:	f7ff fdef 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80005ea:	488a      	ldr	r0, [pc, #552]	; (8000814 <main+0x358>)
 80005ec:	f000 fac6 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80005f0:	4888      	ldr	r0, [pc, #544]	; (8000814 <main+0x358>)
 80005f2:	f7ff ff55 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80005f6:	2064      	movs	r0, #100	; 0x64
 80005f8:	f000 fc74 	bl	8000ee4 <HAL_Delay>
		LEDreg.R09 = 1;
 80005fc:	4a85      	ldr	r2, [pc, #532]	; (8000814 <main+0x358>)
 80005fe:	7893      	ldrb	r3, [r2, #2]
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 8000606:	4883      	ldr	r0, [pc, #524]	; (8000814 <main+0x358>)
 8000608:	f7ff fdde 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800060c:	4881      	ldr	r0, [pc, #516]	; (8000814 <main+0x358>)
 800060e:	f000 fab5 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000612:	4880      	ldr	r0, [pc, #512]	; (8000814 <main+0x358>)
 8000614:	f7ff ff44 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f000 fc63 	bl	8000ee4 <HAL_Delay>
		LEDreg.R10 = 1;
 800061e:	4a7d      	ldr	r2, [pc, #500]	; (8000814 <main+0x358>)
 8000620:	7893      	ldrb	r3, [r2, #2]
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 8000628:	487a      	ldr	r0, [pc, #488]	; (8000814 <main+0x358>)
 800062a:	f7ff fdcd 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800062e:	4879      	ldr	r0, [pc, #484]	; (8000814 <main+0x358>)
 8000630:	f000 faa4 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000634:	4877      	ldr	r0, [pc, #476]	; (8000814 <main+0x358>)
 8000636:	f7ff ff33 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 fc52 	bl	8000ee4 <HAL_Delay>
		LEDreg.R11 = 1;
 8000640:	4a74      	ldr	r2, [pc, #464]	; (8000814 <main+0x358>)
 8000642:	7893      	ldrb	r3, [r2, #2]
 8000644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000648:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 800064a:	4872      	ldr	r0, [pc, #456]	; (8000814 <main+0x358>)
 800064c:	f7ff fdbc 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000650:	4870      	ldr	r0, [pc, #448]	; (8000814 <main+0x358>)
 8000652:	f000 fa93 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000656:	486f      	ldr	r0, [pc, #444]	; (8000814 <main+0x358>)
 8000658:	f7ff ff22 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f000 fc41 	bl	8000ee4 <HAL_Delay>
		LEDreg.R12 = 1;
 8000662:	4a6c      	ldr	r2, [pc, #432]	; (8000814 <main+0x358>)
 8000664:	7893      	ldrb	r3, [r2, #2]
 8000666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066a:	7093      	strb	r3, [r2, #2]
		serializeLEDRegister(&LEDreg);
 800066c:	4869      	ldr	r0, [pc, #420]	; (8000814 <main+0x358>)
 800066e:	f7ff fdab 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000672:	4868      	ldr	r0, [pc, #416]	; (8000814 <main+0x358>)
 8000674:	f000 fa82 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000678:	4866      	ldr	r0, [pc, #408]	; (8000814 <main+0x358>)
 800067a:	f7ff ff11 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800067e:	2064      	movs	r0, #100	; 0x64
 8000680:	f000 fc30 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y01 = 1;
 8000684:	4a63      	ldr	r2, [pc, #396]	; (8000814 <main+0x358>)
 8000686:	7813      	ldrb	r3, [r2, #0]
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 800068e:	4861      	ldr	r0, [pc, #388]	; (8000814 <main+0x358>)
 8000690:	f7ff fd9a 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000694:	485f      	ldr	r0, [pc, #380]	; (8000814 <main+0x358>)
 8000696:	f000 fa71 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 800069a:	485e      	ldr	r0, [pc, #376]	; (8000814 <main+0x358>)
 800069c:	f7ff ff00 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 fc1f 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y02 = 1;
 80006a6:	4a5b      	ldr	r2, [pc, #364]	; (8000814 <main+0x358>)
 80006a8:	7813      	ldrb	r3, [r2, #0]
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 80006b0:	4858      	ldr	r0, [pc, #352]	; (8000814 <main+0x358>)
 80006b2:	f7ff fd89 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80006b6:	4857      	ldr	r0, [pc, #348]	; (8000814 <main+0x358>)
 80006b8:	f000 fa60 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80006bc:	4855      	ldr	r0, [pc, #340]	; (8000814 <main+0x358>)
 80006be:	f7ff feef 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f000 fc0e 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y03 = 1;
 80006c8:	4a52      	ldr	r2, [pc, #328]	; (8000814 <main+0x358>)
 80006ca:	7813      	ldrb	r3, [r2, #0]
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 80006d2:	4850      	ldr	r0, [pc, #320]	; (8000814 <main+0x358>)
 80006d4:	f7ff fd78 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80006d8:	484e      	ldr	r0, [pc, #312]	; (8000814 <main+0x358>)
 80006da:	f000 fa4f 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80006de:	484d      	ldr	r0, [pc, #308]	; (8000814 <main+0x358>)
 80006e0:	f7ff fede 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f000 fbfd 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y04 = 1;
 80006ea:	4a4a      	ldr	r2, [pc, #296]	; (8000814 <main+0x358>)
 80006ec:	7813      	ldrb	r3, [r2, #0]
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 80006f4:	4847      	ldr	r0, [pc, #284]	; (8000814 <main+0x358>)
 80006f6:	f7ff fd67 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80006fa:	4846      	ldr	r0, [pc, #280]	; (8000814 <main+0x358>)
 80006fc:	f000 fa3e 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000700:	4844      	ldr	r0, [pc, #272]	; (8000814 <main+0x358>)
 8000702:	f7ff fecd 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f000 fbec 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y05 = 1;
 800070c:	4a41      	ldr	r2, [pc, #260]	; (8000814 <main+0x358>)
 800070e:	7813      	ldrb	r3, [r2, #0]
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 8000716:	483f      	ldr	r0, [pc, #252]	; (8000814 <main+0x358>)
 8000718:	f7ff fd56 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800071c:	483d      	ldr	r0, [pc, #244]	; (8000814 <main+0x358>)
 800071e:	f000 fa2d 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000722:	483c      	ldr	r0, [pc, #240]	; (8000814 <main+0x358>)
 8000724:	f7ff febc 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000728:	2064      	movs	r0, #100	; 0x64
 800072a:	f000 fbdb 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y06 = 1;
 800072e:	4a39      	ldr	r2, [pc, #228]	; (8000814 <main+0x358>)
 8000730:	7813      	ldrb	r3, [r2, #0]
 8000732:	f043 0320 	orr.w	r3, r3, #32
 8000736:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 8000738:	4836      	ldr	r0, [pc, #216]	; (8000814 <main+0x358>)
 800073a:	f7ff fd45 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800073e:	4835      	ldr	r0, [pc, #212]	; (8000814 <main+0x358>)
 8000740:	f000 fa1c 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000744:	4833      	ldr	r0, [pc, #204]	; (8000814 <main+0x358>)
 8000746:	f7ff feab 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f000 fbca 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y07 = 1;
 8000750:	4a30      	ldr	r2, [pc, #192]	; (8000814 <main+0x358>)
 8000752:	7813      	ldrb	r3, [r2, #0]
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 800075a:	482e      	ldr	r0, [pc, #184]	; (8000814 <main+0x358>)
 800075c:	f7ff fd34 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000760:	482c      	ldr	r0, [pc, #176]	; (8000814 <main+0x358>)
 8000762:	f000 fa0b 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000766:	482b      	ldr	r0, [pc, #172]	; (8000814 <main+0x358>)
 8000768:	f7ff fe9a 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f000 fbb9 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y08 = 1;
 8000772:	4a28      	ldr	r2, [pc, #160]	; (8000814 <main+0x358>)
 8000774:	7813      	ldrb	r3, [r2, #0]
 8000776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077a:	7013      	strb	r3, [r2, #0]
		serializeLEDRegister(&LEDreg);
 800077c:	4825      	ldr	r0, [pc, #148]	; (8000814 <main+0x358>)
 800077e:	f7ff fd23 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000782:	4824      	ldr	r0, [pc, #144]	; (8000814 <main+0x358>)
 8000784:	f000 f9fa 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000788:	4822      	ldr	r0, [pc, #136]	; (8000814 <main+0x358>)
 800078a:	f7ff fe89 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f000 fba8 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y09 = 1;
 8000794:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <main+0x358>)
 8000796:	7853      	ldrb	r3, [r2, #1]
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 800079e:	481d      	ldr	r0, [pc, #116]	; (8000814 <main+0x358>)
 80007a0:	f7ff fd12 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80007a4:	481b      	ldr	r0, [pc, #108]	; (8000814 <main+0x358>)
 80007a6:	f000 f9e9 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80007aa:	481a      	ldr	r0, [pc, #104]	; (8000814 <main+0x358>)
 80007ac:	f7ff fe78 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80007b0:	2064      	movs	r0, #100	; 0x64
 80007b2:	f000 fb97 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y10 = 1;
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <main+0x358>)
 80007b8:	7853      	ldrb	r3, [r2, #1]
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <main+0x358>)
 80007c2:	f7ff fd01 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80007c6:	4813      	ldr	r0, [pc, #76]	; (8000814 <main+0x358>)
 80007c8:	f000 f9d8 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <main+0x358>)
 80007ce:	f7ff fe67 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	f000 fb86 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y11 = 1;
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <main+0x358>)
 80007da:	7853      	ldrb	r3, [r2, #1]
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <main+0x358>)
 80007e4:	f7ff fcf0 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <main+0x358>)
 80007ea:	f000 f9c7 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <main+0x358>)
 80007f0:	f7ff fe56 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80007f4:	2064      	movs	r0, #100	; 0x64
 80007f6:	f000 fb75 	bl	8000ee4 <HAL_Delay>
		LEDreg.Y12 = 1;
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <main+0x358>)
 80007fc:	7853      	ldrb	r3, [r2, #1]
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	7053      	strb	r3, [r2, #1]
		serializeLEDRegister(&LEDreg);
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <main+0x358>)
 8000806:	f7ff fcdf 	bl	80001c8 <serializeLEDRegister>
 800080a:	e005      	b.n	8000818 <main+0x35c>
 800080c:	08003364 	.word	0x08003364
 8000810:	20000028 	.word	0x20000028
 8000814:	20000130 	.word	0x20000130
		displayLEDBuffer(&LEDreg);
 8000818:	4848      	ldr	r0, [pc, #288]	; (800093c <main+0x480>)
 800081a:	f000 f9af 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 800081e:	4847      	ldr	r0, [pc, #284]	; (800093c <main+0x480>)
 8000820:	f7ff fe3e 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000824:	2064      	movs	r0, #100	; 0x64
 8000826:	f000 fb5d 	bl	8000ee4 <HAL_Delay>
		LEDreg.GPS = 1;
 800082a:	4a44      	ldr	r2, [pc, #272]	; (800093c <main+0x480>)
 800082c:	78d3      	ldrb	r3, [r2, #3]
 800082e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000832:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 8000834:	4841      	ldr	r0, [pc, #260]	; (800093c <main+0x480>)
 8000836:	f7ff fcc7 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800083a:	4840      	ldr	r0, [pc, #256]	; (800093c <main+0x480>)
 800083c:	f000 f99e 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000840:	483e      	ldr	r0, [pc, #248]	; (800093c <main+0x480>)
 8000842:	f7ff fe2d 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f000 fb4c 	bl	8000ee4 <HAL_Delay>
		LEDreg.RX = 1;
 800084c:	4a3b      	ldr	r2, [pc, #236]	; (800093c <main+0x480>)
 800084e:	78d3      	ldrb	r3, [r2, #3]
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 8000856:	4839      	ldr	r0, [pc, #228]	; (800093c <main+0x480>)
 8000858:	f7ff fcb6 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800085c:	4837      	ldr	r0, [pc, #220]	; (800093c <main+0x480>)
 800085e:	f000 f98d 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000862:	4836      	ldr	r0, [pc, #216]	; (800093c <main+0x480>)
 8000864:	f7ff fe1c 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000868:	2064      	movs	r0, #100	; 0x64
 800086a:	f000 fb3b 	bl	8000ee4 <HAL_Delay>
		LEDreg.TX = 1;
 800086e:	4a33      	ldr	r2, [pc, #204]	; (800093c <main+0x480>)
 8000870:	78d3      	ldrb	r3, [r2, #3]
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 8000878:	4830      	ldr	r0, [pc, #192]	; (800093c <main+0x480>)
 800087a:	f7ff fca5 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 800087e:	482f      	ldr	r0, [pc, #188]	; (800093c <main+0x480>)
 8000880:	f000 f97c 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 8000884:	482d      	ldr	r0, [pc, #180]	; (800093c <main+0x480>)
 8000886:	f7ff fe0b 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f000 fb2a 	bl	8000ee4 <HAL_Delay>
		LEDreg.LL = 1;
 8000890:	4a2a      	ldr	r2, [pc, #168]	; (800093c <main+0x480>)
 8000892:	78d3      	ldrb	r3, [r2, #3]
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 800089a:	4828      	ldr	r0, [pc, #160]	; (800093c <main+0x480>)
 800089c:	f7ff fc94 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80008a0:	4826      	ldr	r0, [pc, #152]	; (800093c <main+0x480>)
 80008a2:	f000 f96b 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80008a6:	4825      	ldr	r0, [pc, #148]	; (800093c <main+0x480>)
 80008a8:	f7ff fdfa 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80008ac:	2064      	movs	r0, #100	; 0x64
 80008ae:	f000 fb19 	bl	8000ee4 <HAL_Delay>
		LEDreg.L = 1;
 80008b2:	4a22      	ldr	r2, [pc, #136]	; (800093c <main+0x480>)
 80008b4:	78d3      	ldrb	r3, [r2, #3]
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 80008bc:	481f      	ldr	r0, [pc, #124]	; (800093c <main+0x480>)
 80008be:	f7ff fc83 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80008c2:	481e      	ldr	r0, [pc, #120]	; (800093c <main+0x480>)
 80008c4:	f000 f95a 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80008c8:	481c      	ldr	r0, [pc, #112]	; (800093c <main+0x480>)
 80008ca:	f7ff fde9 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fb08 	bl	8000ee4 <HAL_Delay>
		LEDreg.M = 1;
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <main+0x480>)
 80008d6:	78d3      	ldrb	r3, [r2, #3]
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 80008de:	4817      	ldr	r0, [pc, #92]	; (800093c <main+0x480>)
 80008e0:	f7ff fc72 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 80008e4:	4815      	ldr	r0, [pc, #84]	; (800093c <main+0x480>)
 80008e6:	f000 f949 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 80008ea:	4814      	ldr	r0, [pc, #80]	; (800093c <main+0x480>)
 80008ec:	f7ff fdd8 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 faf7 	bl	8000ee4 <HAL_Delay>
		LEDreg.H = 1;
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <main+0x480>)
 80008f8:	78d3      	ldrb	r3, [r2, #3]
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <main+0x480>)
 8000902:	f7ff fc61 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <main+0x480>)
 8000908:	f000 f938 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <main+0x480>)
 800090e:	f7ff fdc7 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f000 fae6 	bl	8000ee4 <HAL_Delay>
		LEDreg.HH = 1;
 8000918:	4a08      	ldr	r2, [pc, #32]	; (800093c <main+0x480>)
 800091a:	78d3      	ldrb	r3, [r2, #3]
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	70d3      	strb	r3, [r2, #3]
		serializeLEDRegister(&LEDreg);
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <main+0x480>)
 8000924:	f7ff fc50 	bl	80001c8 <serializeLEDRegister>
		displayLEDBuffer(&LEDreg);
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <main+0x480>)
 800092a:	f000 f927 	bl	8000b7c <displayLEDBuffer>
		clearLEDRegister(&LEDreg);
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <main+0x480>)
 8000930:	f7ff fdb6 	bl	80004a0 <clearLEDRegister>
		HAL_Delay(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f000 fad5 	bl	8000ee4 <HAL_Delay>
		LEDreg.R01 = 1;
 800093a:	e5d7      	b.n	80004ec <main+0x30>
 800093c:	20000130 	.word	0x20000130

08000940 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b096      	sub	sp, #88	; 0x58
 8000944:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094a:	2228      	movs	r2, #40	; 0x28
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fcf4 	bl	800333c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	619a      	str	r2, [r3, #24]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000976:	2301      	movs	r3, #1
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000992:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fd35 	bl	800140c <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x6c>
		Error_Handler();
 80009a8:	f000 f933 	bl	8000c12 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2102      	movs	r1, #2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fd5d 	bl	8002488 <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x98>
		Error_Handler();
 80009d4:	f000 f91d 	bl	8000c12 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d8:	2301      	movs	r3, #1
 80009da:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80009e0:	463b      	mov	r3, r7
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 ff88 	bl	80028f8 <HAL_RCCEx_PeriphCLKConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xb2>
		Error_Handler();
 80009ee:	f000 f910 	bl	8000c12 <Error_Handler>
	}
}
 80009f2:	bf00      	nop
 80009f4:	3758      	adds	r7, #88	; 0x58
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART1_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a40:	f002 f890 	bl	8002b64 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000a4a:	f000 f8e2 	bl	8000c12 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000028 	.word	0x20000028
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_USART2_UART_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000aa0:	f002 f860 	bl	8002b64 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000aaa:	f000 f8b2 	bl	8000c12 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000ac 	.word	0x200000ac
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SIN_Pin | SCLK_Pin | LAT_Pin | BLANK_Pin,
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	21f0      	movs	r1, #240	; 0xf0
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f000 fc5b 	bl	80013dc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4813      	ldr	r0, [pc, #76]	; (8000b78 <MX_GPIO_Init+0xbc>)
 8000b2c:	f000 fc56 	bl	80013dc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SIN_Pin SCLK_Pin LAT_Pin BLANK_Pin */
	GPIO_InitStruct.Pin = SIN_Pin | SCLK_Pin | LAT_Pin | BLANK_Pin;
 8000b30:	23f0      	movs	r3, #240	; 0xf0
 8000b32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fad5 	bl	80010f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUZZER_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b56:	2302      	movs	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4619      	mov	r1, r3
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_GPIO_Init+0xbc>)
 8000b66:	f000 fac7 	bl	80010f8 <HAL_GPIO_Init>

}
 8000b6a:	bf00      	nop
 8000b6c:	3720      	adds	r7, #32
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400

08000b7c <displayLEDBuffer>:

/* USER CODE BEGIN 4 */

void displayLEDBuffer(struct LEDRegister *reg) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LED_BUFFER_SIZE; i++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	e01a      	b.n	8000bc0 <displayLEDBuffer+0x44>
		if (reg->Buffer >> i & 1) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <displayLEDBuffer+0x2e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f000 fc1a 	bl	80013dc <HAL_GPIO_WritePin>
 8000ba8:	e005      	b.n	8000bb6 <displayLEDBuffer+0x3a>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2110      	movs	r1, #16
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f000 fc13 	bl	80013dc <HAL_GPIO_WritePin>
		}
		displayClockPulse();
 8000bb6:	f000 f80c 	bl	8000bd2 <displayClockPulse>
	for (int i = 0; i < LED_BUFFER_SIZE; i++) {
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b1f      	cmp	r3, #31
 8000bc4:	dde1      	ble.n	8000b8a <displayLEDBuffer+0xe>
	}
	displayLatch();
 8000bc6:	f000 f814 	bl	8000bf2 <displayLatch>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <displayClockPulse>:

void displayClockPulse() {
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2120      	movs	r1, #32
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f000 fbfd 	bl	80013dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2120      	movs	r1, #32
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fbf7 	bl	80013dc <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <displayLatch>:

void displayLatch() {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2140      	movs	r1, #64	; 0x40
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fbed 	bl	80013dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f000 fbe7 	bl	80013dc <HAL_GPIO_WritePin>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c16:	b672      	cpsid	i
}
 8000c18:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c1a:	e7fe      	b.n	8000c1a <Error_Handler+0x8>

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x44>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_MspInit+0x44>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_MspInit+0x44>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x44>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x44>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x44>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <HAL_UART_MspInit+0xdc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12a      	bne.n	8000cdc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fa0f 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cda:	e02d      	b.n	8000d38 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0xe4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d128      	bne.n	8000d38 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_UART_MspInit+0xe0>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d16:	230c      	movs	r3, #12
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f000 f9e0 	bl	80010f8 <HAL_GPIO_Init>
}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40004400 	.word	0x40004400

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <NMI_Handler+0x4>

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f000 f884 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dee:	f7ff ffd7 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f002 fa7f 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fb61 	bl	80004bc <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dfc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e08:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e10:	2000013c 	.word	0x2000013c

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x28>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f931 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fef2 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f93b 	bl	80010de <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e80:	f000 f911 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000138 	.word	0x20000138

08000ecc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000138 	.word	0x20000138

08000ee4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff47 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff5c 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffb0 	bl	800104c <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e14e      	b.n	80013a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8140 	beq.w	80013a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d005      	beq.n	8001138 <HAL_GPIO_Init+0x40>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d130      	bne.n	800119a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116e:	2201      	movs	r2, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	f003 0201 	and.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d017      	beq.n	80011d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	6939      	ldr	r1, [r7, #16]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0203 	and.w	r2, r3, #3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 809a 	beq.w	80013a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b55      	ldr	r3, [pc, #340]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a54      	ldr	r2, [pc, #336]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001284:	4a50      	ldr	r2, [pc, #320]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ae:	d013      	beq.n	80012d8 <HAL_GPIO_Init+0x1e0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a46      	ldr	r2, [pc, #280]	; (80013cc <HAL_GPIO_Init+0x2d4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00d      	beq.n	80012d4 <HAL_GPIO_Init+0x1dc>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a45      	ldr	r2, [pc, #276]	; (80013d0 <HAL_GPIO_Init+0x2d8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d007      	beq.n	80012d0 <HAL_GPIO_Init+0x1d8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a44      	ldr	r2, [pc, #272]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d101      	bne.n	80012cc <HAL_GPIO_Init+0x1d4>
 80012c8:	2303      	movs	r3, #3
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x1e2>
 80012cc:	2305      	movs	r3, #5
 80012ce:	e004      	b.n	80012da <HAL_GPIO_Init+0x1e2>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x1e2>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x1e2>
 80012d8:	2300      	movs	r3, #0
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ea:	4937      	ldr	r1, [pc, #220]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800131c:	4a2e      	ldr	r2, [pc, #184]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f47f aea9 	bne.w	8001108 <HAL_GPIO_Init+0x10>
  }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	40010400 	.word	0x40010400

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001412:	af00      	add	r7, sp, #0
 8001414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800141e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	f001 b823 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 817d 	beq.w	8001742 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001448:	4bbc      	ldr	r3, [pc, #752]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00c      	beq.n	800146e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001454:	4bb9      	ldr	r3, [pc, #740]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d15c      	bne.n	800151a <HAL_RCC_OscConfig+0x10e>
 8001460:	4bb6      	ldr	r3, [pc, #728]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d155      	bne.n	800151a <HAL_RCC_OscConfig+0x10e>
 800146e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001472:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001482:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <HAL_RCC_OscConfig+0x94>
 800149a:	4ba8      	ldr	r3, [pc, #672]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	e015      	b.n	80014cc <HAL_RCC_OscConfig+0xc0>
 80014a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80014c8:	4b9c      	ldr	r3, [pc, #624]	; (800173c <HAL_RCC_OscConfig+0x330>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80014d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014d8:	fa92 f2a2 	rbit	r2, r2
 80014dc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80014e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80014e4:	fab2 f282 	clz	r2, r2
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	f002 021f 	and.w	r2, r2, #31
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 811f 	beq.w	8001740 <HAL_RCC_OscConfig+0x334>
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 8116 	bne.w	8001740 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	f000 bfaf 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x12e>
 800152c:	4b83      	ldr	r3, [pc, #524]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a82      	ldr	r2, [pc, #520]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e036      	b.n	80015a8 <HAL_RCC_OscConfig+0x19c>
 800153a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x158>
 800154a:	4b7c      	ldr	r3, [pc, #496]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7b      	ldr	r2, [pc, #492]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b79      	ldr	r3, [pc, #484]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a78      	ldr	r2, [pc, #480]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800155c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e021      	b.n	80015a8 <HAL_RCC_OscConfig+0x19c>
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x184>
 8001576:	4b71      	ldr	r3, [pc, #452]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a70      	ldr	r2, [pc, #448]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b6e      	ldr	r3, [pc, #440]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6d      	ldr	r2, [pc, #436]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x19c>
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a69      	ldr	r2, [pc, #420]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b67      	ldr	r3, [pc, #412]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a66      	ldr	r2, [pc, #408]	; (800173c <HAL_RCC_OscConfig+0x330>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a8:	4b64      	ldr	r3, [pc, #400]	; (800173c <HAL_RCC_OscConfig+0x330>)
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	f023 020f 	bic.w	r2, r3, #15
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	495f      	ldr	r1, [pc, #380]	; (800173c <HAL_RCC_OscConfig+0x330>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d059      	beq.n	8001686 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fc7b 	bl	8000ecc <HAL_GetTick>
 80015d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fc76 	bl	8000ecc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d902      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f000 bf43 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
 80015f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001606:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_RCC_OscConfig+0x218>
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	e015      	b.n	8001650 <HAL_RCC_OscConfig+0x244>
 8001624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001628:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001640:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800164c:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_RCC_OscConfig+0x330>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001654:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001658:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800165c:	fa92 f2a2 	rbit	r2, r2
 8001660:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001664:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001668:	fab2 f282 	clz	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ab      	beq.n	80015dc <HAL_RCC_OscConfig+0x1d0>
 8001684:	e05d      	b.n	8001742 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fc21 	bl	8000ecc <HAL_GetTick>
 800168a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fc1c 	bl	8000ecc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	; 0x64
 800169e:	d902      	bls.n	80016a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	f000 bee9 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
 80016a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2cc>
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_RCC_OscConfig+0x330>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	e015      	b.n	8001704 <HAL_RCC_OscConfig+0x2f8>
 80016d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_RCC_OscConfig+0x330>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001708:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800170c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001710:	fa92 f2a2 	rbit	r2, r2
 8001714:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001718:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800171c:	fab2 f282 	clz	r2, r2
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	f042 0220 	orr.w	r2, r2, #32
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f002 021f 	and.w	r2, r2, #31
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ab      	bne.n	8001690 <HAL_RCC_OscConfig+0x284>
 8001738:	e003      	b.n	8001742 <HAL_RCC_OscConfig+0x336>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 817d 	beq.w	8001a52 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001758:	4ba6      	ldr	r3, [pc, #664]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001764:	4ba3      	ldr	r3, [pc, #652]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d172      	bne.n	8001856 <HAL_RCC_OscConfig+0x44a>
 8001770:	4ba0      	ldr	r3, [pc, #640]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d16c      	bne.n	8001856 <HAL_RCC_OscConfig+0x44a>
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800178e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x3a0>
 80017a6:	4b93      	ldr	r3, [pc, #588]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0x3c8>
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017d0:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	2202      	movs	r2, #2
 80017d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017de:	fa92 f2a2 	rbit	r2, r2
 80017e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80017e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f002 021f 	and.w	r2, r2, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00a      	beq.n	800181c <HAL_RCC_OscConfig+0x410>
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d002      	beq.n	800181c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f000 be2e 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	21f8      	movs	r1, #248	; 0xf8
 8001832:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800183a:	fa91 f1a1 	rbit	r1, r1
 800183e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001842:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001846:	fab1 f181 	clz	r1, r1
 800184a:	b2c9      	uxtb	r1, r1
 800184c:	408b      	lsls	r3, r1
 800184e:	4969      	ldr	r1, [pc, #420]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001854:	e0fd      	b.n	8001a52 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8088 	beq.w	8001978 <HAL_RCC_OscConfig+0x56c>
 8001868:	2301      	movs	r3, #1
 800186a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800187a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	461a      	mov	r2, r3
 8001890:	2301      	movs	r3, #1
 8001892:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fb1a 	bl	8000ecc <HAL_GetTick>
 8001898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fb15 	bl	8000ecc <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d902      	bls.n	80018b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	f000 bde2 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4d8>
 80018de:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	e013      	b.n	800190c <HAL_RCC_OscConfig+0x500>
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2202      	movs	r2, #2
 800190e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001912:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001916:	fa92 f2a2 	rbit	r2, r2
 800191a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800191e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f042 0220 	orr.w	r2, r2, #32
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0af      	beq.n	800189e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	21f8      	movs	r1, #248	; 0xf8
 8001954:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800195c:	fa91 f1a1 	rbit	r1, r1
 8001960:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001964:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001968:	fab1 f181 	clz	r1, r1
 800196c:	b2c9      	uxtb	r1, r1
 800196e:	408b      	lsls	r3, r1
 8001970:	4920      	ldr	r1, [pc, #128]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
 8001976:	e06c      	b.n	8001a52 <HAL_RCC_OscConfig+0x646>
 8001978:	2301      	movs	r3, #1
 800197a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800198a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	461a      	mov	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fa92 	bl	8000ecc <HAL_GetTick>
 80019a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fa8d 	bl	8000ecc <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d902      	bls.n	80019c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	f000 bd5a 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d104      	bne.n	80019f8 <HAL_RCC_OscConfig+0x5ec>
 80019ee:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <HAL_RCC_OscConfig+0x5e8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e015      	b.n	8001a20 <HAL_RCC_OscConfig+0x614>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a1c:	4bc8      	ldr	r3, [pc, #800]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2202      	movs	r2, #2
 8001a22:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a26:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a2a:	fa92 f2a2 	rbit	r2, r2
 8001a2e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a32:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ad      	bne.n	80019ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8110 	beq.w	8001c88 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d079      	beq.n	8001b6c <HAL_RCC_OscConfig+0x760>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4bab      	ldr	r3, [pc, #684]	; (8001d44 <HAL_RCC_OscConfig+0x938>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fa13 	bl	8000ecc <HAL_GetTick>
 8001aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fa0e 	bl	8000ecc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d902      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f000 bcdb 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b00:	2202      	movs	r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1c:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b28:	2102      	movs	r1, #2
 8001b2a:	6019      	str	r1, [r3, #0]
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f1a3 	rbit	r1, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b42:	6019      	str	r1, [r3, #0]
  return result;
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0a0      	beq.n	8001aac <HAL_RCC_OscConfig+0x6a0>
 8001b6a:	e08d      	b.n	8001c88 <HAL_RCC_OscConfig+0x87c>
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b8e:	601a      	str	r2, [r3, #0]
  return result;
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x938>)
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2300      	movs	r3, #0
 8001bac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff f98d 	bl	8000ecc <HAL_GetTick>
 8001bb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f988 	bl	8000ecc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d902      	bls.n	8001bce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	f000 bc55 	b.w	8002478 <HAL_RCC_OscConfig+0x106c>
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c1e:	2202      	movs	r2, #2
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c46:	2102      	movs	r1, #2
 8001c48:	6019      	str	r1, [r3, #0]
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f1a3 	rbit	r1, r3
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c60:	6019      	str	r1, [r3, #0]
  return result;
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d197      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 81a1 	beq.w	8001fe0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d116      	bne.n	8001cde <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cba:	61d3      	str	r3, [r2, #28]
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001cd6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_RCC_OscConfig+0x93c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d11a      	bne.n	8001d20 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_RCC_OscConfig+0x93c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_RCC_OscConfig+0x93c>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f8e9 	bl	8000ecc <HAL_GetTick>
 8001cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	e009      	b.n	8001d14 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7ff f8e4 	bl	8000ecc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b64      	cmp	r3, #100	; 0x64
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e3b1      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x93c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ef      	beq.n	8001d00 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_OscConfig+0x940>
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a02      	ldr	r2, [pc, #8]	; (8001d40 <HAL_RCC_OscConfig+0x934>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e03c      	b.n	8001db8 <HAL_RCC_OscConfig+0x9ac>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	10908120 	.word	0x10908120
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x96a>
 8001d5c:	4bc1      	ldr	r3, [pc, #772]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4ac0      	ldr	r2, [pc, #768]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	4bbe      	ldr	r3, [pc, #760]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4abd      	ldr	r2, [pc, #756]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e020      	b.n	8001db8 <HAL_RCC_OscConfig+0x9ac>
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x994>
 8001d86:	4bb7      	ldr	r3, [pc, #732]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4ab6      	ldr	r2, [pc, #728]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4bb4      	ldr	r3, [pc, #720]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4ab3      	ldr	r2, [pc, #716]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0x9ac>
 8001da0:	4bb0      	ldr	r3, [pc, #704]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4aaf      	ldr	r2, [pc, #700]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4bad      	ldr	r3, [pc, #692]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4aac      	ldr	r2, [pc, #688]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001db2:	f023 0304 	bic.w	r3, r3, #4
 8001db6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 8081 	beq.w	8001ecc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7ff f87f 	bl	8000ecc <HAL_GetTick>
 8001dce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f87a 	bl	8000ecc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e345      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001df4:	2202      	movs	r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e32:	601a      	str	r2, [r3, #0]
  return result;
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d102      	bne.n	8001e58 <HAL_RCC_OscConfig+0xa4c>
 8001e52:	4b84      	ldr	r3, [pc, #528]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	e013      	b.n	8001e80 <HAL_RCC_OscConfig+0xa74>
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	4b79      	ldr	r3, [pc, #484]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e88:	2102      	movs	r1, #2
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e90:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	fa92 f1a2 	rbit	r1, r2
 8001e9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ea2:	6011      	str	r1, [r2, #0]
  return result;
 8001ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d084      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x9c8>
 8001eca:	e07f      	b.n	8001fcc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fffe 	bl	8000ecc <HAL_GetTick>
 8001ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e00b      	b.n	8001eee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fff9 	bl	8000ecc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e2c4      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	fa93 f2a3 	rbit	r2, r3
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f34:	601a      	str	r2, [r3, #0]
  return result;
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d102      	bne.n	8001f5a <HAL_RCC_OscConfig+0xb4e>
 8001f54:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	e013      	b.n	8001f82 <HAL_RCC_OscConfig+0xb76>
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f62:	2202      	movs	r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f2a3 	rbit	r2, r3
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	4b39      	ldr	r3, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	6011      	str	r1, [r2, #0]
 8001f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	fa92 f1a2 	rbit	r1, r2
 8001f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fa4:	6011      	str	r1, [r2, #0]
  return result;
 8001fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001faa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	fab2 f282 	clz	r2, r2
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f002 021f 	and.w	r2, r2, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d184      	bne.n	8001ed6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fcc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8242 	beq.w	8002476 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_RCC_OscConfig+0xc58>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	f000 8213 	beq.w	8002426 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b02      	cmp	r3, #2
 800200e:	f040 8162 	bne.w	80022d6 <HAL_RCC_OscConfig+0xeca>
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800201a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800201e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002036:	601a      	str	r2, [r3, #0]
  return result;
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002040:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800204c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	461a      	mov	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7fe ff38 	bl	8000ecc <HAL_GetTick>
 800205c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	e00c      	b.n	800207c <HAL_RCC_OscConfig+0xc70>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7fe ff30 	bl	8000ecc <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1fd      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020a0:	601a      	str	r2, [r3, #0]
  return result;
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d102      	bne.n	80020c6 <HAL_RCC_OscConfig+0xcba>
 80020c0:	4bb0      	ldr	r3, [pc, #704]	; (8002384 <HAL_RCC_OscConfig+0xf78>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	e027      	b.n	8002116 <HAL_RCC_OscConfig+0xd0a>
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	4b9c      	ldr	r3, [pc, #624]	; (8002384 <HAL_RCC_OscConfig+0xf78>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800211a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800211e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002122:	6011      	str	r1, [r2, #0]
 8002124:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002128:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	fa92 f1a2 	rbit	r1, r2
 8002132:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002136:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800213a:	6011      	str	r1, [r2, #0]
  return result;
 800213c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002140:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d182      	bne.n	8002068 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0xf78>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	430b      	orrs	r3, r1
 8002184:	497f      	ldr	r1, [pc, #508]	; (8002384 <HAL_RCC_OscConfig+0xf78>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002192:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa93 f2a3 	rbit	r2, r3
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021ae:	601a      	str	r2, [r3, #0]
  return result;
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	461a      	mov	r2, r3
 80021cc:	2301      	movs	r3, #1
 80021ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fe7c 	bl	8000ecc <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d8:	e009      	b.n	80021ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fe77 	bl	8000ecc <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e144      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f2a3 	rbit	r2, r3
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002212:	601a      	str	r2, [r3, #0]
  return result;
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800221c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_RCC_OscConfig+0xe2c>
 8002232:	4b54      	ldr	r3, [pc, #336]	; (8002384 <HAL_RCC_OscConfig+0xf78>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e027      	b.n	8002288 <HAL_RCC_OscConfig+0xe7c>
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002240:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0xf78>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800228c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002290:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002294:	6011      	str	r1, [r2, #0]
 8002296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800229a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	fa92 f1a2 	rbit	r1, r2
 80022a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022ac:	6011      	str	r1, [r2, #0]
  return result;
 80022ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d082      	beq.n	80021da <HAL_RCC_OscConfig+0xdce>
 80022d4:	e0cf      	b.n	8002476 <HAL_RCC_OscConfig+0x106a>
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022fa:	601a      	str	r2, [r3, #0]
  return result;
 80022fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002300:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002304:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	461a      	mov	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fdd6 	bl	8000ecc <HAL_GetTick>
 8002320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	e009      	b.n	800233a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe fdd1 	bl	8000ecc <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e09e      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800235e:	601a      	str	r2, [r3, #0]
  return result;
 8002360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002364:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002368:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d104      	bne.n	8002388 <HAL_RCC_OscConfig+0xf7c>
 800237e:	4b01      	ldr	r3, [pc, #4]	; (8002384 <HAL_RCC_OscConfig+0xf78>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	e029      	b.n	80023d8 <HAL_RCC_OscConfig+0xfcc>
 8002384:	40021000 	.word	0x40021000
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_OscConfig+0x1078>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023dc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023e4:	6011      	str	r1, [r2, #0]
 80023e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	fa92 f1a2 	rbit	r1, r2
 80023f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023fc:	6011      	str	r1, [r2, #0]
  return result;
 80023fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002402:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	fab2 f282 	clz	r2, r2
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	f042 0220 	orr.w	r2, r2, #32
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	f002 021f 	and.w	r2, r2, #31
 8002418:	2101      	movs	r1, #1
 800241a:	fa01 f202 	lsl.w	r2, r1, r2
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d180      	bne.n	8002326 <HAL_RCC_OscConfig+0xf1a>
 8002424:	e027      	b.n	8002476 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01e      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_OscConfig+0x1078>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002442:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002446:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	429a      	cmp	r2, r3
 8002458:	d10b      	bne.n	8002472 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800245a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800245e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b09e      	sub	sp, #120	; 0x78
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e162      	b.n	8002766 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d910      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b8d      	ldr	r3, [pc, #564]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	498b      	ldr	r1, [pc, #556]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b89      	ldr	r3, [pc, #548]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e14a      	b.n	8002766 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b82      	ldr	r3, [pc, #520]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	497f      	ldr	r1, [pc, #508]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80dc 	beq.w	80026b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d13c      	bne.n	800257e <HAL_RCC_ClockConfig+0xf6>
 8002504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002508:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_RCC_ClockConfig+0xa6>
 8002528:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e00f      	b.n	800254e <HAL_RCC_ClockConfig+0xc6>
 800252e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002532:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	667b      	str	r3, [r7, #100]	; 0x64
 800253c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002540:	663b      	str	r3, [r7, #96]	; 0x60
 8002542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002552:	65ba      	str	r2, [r7, #88]	; 0x58
 8002554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002556:	fa92 f2a2 	rbit	r2, r2
 800255a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800255c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800255e:	fab2 f282 	clz	r2, r2
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f042 0220 	orr.w	r2, r2, #32
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	f002 021f 	and.w	r2, r2, #31
 800256e:	2101      	movs	r1, #1
 8002570:	fa01 f202 	lsl.w	r2, r1, r2
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d17b      	bne.n	8002672 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0f3      	b.n	8002766 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d13c      	bne.n	8002600 <HAL_RCC_ClockConfig+0x178>
 8002586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x128>
 80025aa:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e00f      	b.n	80025d0 <HAL_RCC_ClockConfig+0x148>
 80025b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
 80025be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40
 80025c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025cc:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80025d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d8:	fa92 f2a2 	rbit	r2, r2
 80025dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d13a      	bne.n	8002672 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b2      	b.n	8002766 <HAL_RCC_ClockConfig+0x2de>
 8002600:	2302      	movs	r3, #2
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_RCC_ClockConfig+0x1a0>
 8002622:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	e00d      	b.n	8002644 <HAL_RCC_ClockConfig+0x1bc>
 8002628:	2302      	movs	r3, #2
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	2302      	movs	r3, #2
 8002636:	623b      	str	r3, [r7, #32]
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2202      	movs	r2, #2
 8002646:	61ba      	str	r2, [r7, #24]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	fa92 f2a2 	rbit	r2, r2
 800264e:	617a      	str	r2, [r7, #20]
  return result;
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	fab2 f282 	clz	r2, r2
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f042 0220 	orr.w	r2, r2, #32
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f002 021f 	and.w	r2, r2, #31
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e079      	b.n	8002766 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	491a      	ldr	r1, [pc, #104]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7fe fc22 	bl	8000ecc <HAL_GetTick>
 8002688:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fc1e 	bl	8000ecc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e061      	b.n	8002766 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d214      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4906      	ldr	r1, [pc, #24]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RCC_ClockConfig+0x25c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e040      	b.n	8002766 <HAL_RCC_ClockConfig+0x2de>
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCC_ClockConfig+0x2e8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	491a      	ldr	r1, [pc, #104]	; (8002770 <HAL_RCC_ClockConfig+0x2e8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x2e8>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4912      	ldr	r1, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x2e8>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800272a:	f000 f829 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800272e:	4601      	mov	r1, r0
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCC_ClockConfig+0x2e8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002738:	22f0      	movs	r2, #240	; 0xf0
 800273a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	fa92 f2a2 	rbit	r2, r2
 8002742:	60fa      	str	r2, [r7, #12]
  return result;
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	40d3      	lsrs	r3, r2
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x2ec>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	fa21 f303 	lsr.w	r3, r1, r3
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <HAL_RCC_ClockConfig+0x2f0>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCC_ClockConfig+0x2f4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fb70 	bl	8000e44 <HAL_InitTick>
  
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3778      	adds	r7, #120	; 0x78
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	08003370 	.word	0x08003370
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b08b      	sub	sp, #44	; 0x2c
 8002784:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_RCC_GetSysClockFreq+0xc0>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d002      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x30>
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ae:	e03c      	b.n	800282a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b0:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027b2:	623b      	str	r3, [r7, #32]
      break;
 80027b4:	e03c      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	fa92 f2a2 	rbit	r2, r2
 80027c8:	607a      	str	r2, [r7, #4]
  return result;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	40d3      	lsrs	r3, r2
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	220f      	movs	r2, #15
 80027e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	60fa      	str	r2, [r7, #12]
  return result;
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	40d3      	lsrs	r3, r2
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_RCC_GetSysClockFreq+0xcc>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_RCC_GetSysClockFreq+0xc4>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e004      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_RCC_GetSysClockFreq+0xd0>)
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	623b      	str	r3, [r7, #32]
      break;
 8002828:	e002      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_GetSysClockFreq+0xd4>)
 800282c:	623b      	str	r3, [r7, #32]
      break;
 800282e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002830:	6a3b      	ldr	r3, [r7, #32]
}
 8002832:	4618      	mov	r0, r3
 8002834:	372c      	adds	r7, #44	; 0x2c
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	00f42400 	.word	0x00f42400
 8002848:	08003388 	.word	0x08003388
 800284c:	08003398 	.word	0x08003398
 8002850:	003d0900 	.word	0x003d0900
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002876:	f7ff ffef 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 800287a:	4601      	mov	r1, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002884:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002888:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	603a      	str	r2, [r7, #0]
  return result;
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	40d3      	lsrs	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08003380 	.word	0x08003380

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028ba:	f7ff ffcd 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028be:	4601      	mov	r1, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	fa92 f2a2 	rbit	r2, r2
 80028d4:	603a      	str	r2, [r7, #0]
  return result;
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	fab2 f282 	clz	r2, r2
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	40d3      	lsrs	r3, r2
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08003380 	.word	0x08003380

080028f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b092      	sub	sp, #72	; 0x48
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80cd 	beq.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291c:	4b8e      	ldr	r3, [pc, #568]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10e      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b8b      	ldr	r3, [pc, #556]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a8a      	ldr	r2, [pc, #552]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	61d3      	str	r3, [r2, #28]
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b85      	ldr	r3, [pc, #532]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d118      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	4b82      	ldr	r3, [pc, #520]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a81      	ldr	r2, [pc, #516]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295e:	f7fe fab5 	bl	8000ecc <HAL_GetTick>
 8002962:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e008      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fe fab1 	bl	8000ecc <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d901      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0ea      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	4b78      	ldr	r3, [pc, #480]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002984:	4b74      	ldr	r3, [pc, #464]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d07d      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800299e:	429a      	cmp	r2, r3
 80029a0:	d076      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a2:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	461a      	mov	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b5d      	ldr	r3, [pc, #372]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d045      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fa62 	bl	8000ecc <HAL_GetTick>
 8002a08:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fa5e 	bl	8000ecc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e095      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	2302      	movs	r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	61fb      	str	r3, [r7, #28]
  return result;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002a50:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	e007      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2202      	movs	r2, #2
 8002a68:	613a      	str	r2, [r7, #16]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	60fa      	str	r2, [r7, #12]
  return result;
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f002 021f 	and.w	r2, r2, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0bd      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	492e      	ldr	r1, [pc, #184]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f023 0210 	bic.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	491a      	ldr	r1, [pc, #104]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4913      	ldr	r1, [pc, #76]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	490b      	ldr	r1, [pc, #44]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3748      	adds	r7, #72	; 0x48
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	10908100 	.word	0x10908100

08002b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e040      	b.n	8002bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe f86c 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8c0 	bl	8002d28 <UART_SetConfig>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e022      	b.n	8002bf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9ea 	bl	8002f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fa71 	bl	80030d8 <UART_CheckIdleState>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	f040 8082 	bne.w	8002d1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_UART_Transmit+0x26>
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07a      	b.n	8002d20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_UART_Transmit+0x38>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e073      	b.n	8002d20 <HAL_UART_Transmit+0x120>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4e:	f7fe f93d 	bl	8000ecc <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d108      	bne.n	8002c80 <HAL_UART_Transmit+0x80>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e003      	b.n	8002c88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c90:	e02d      	b.n	8002cee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fa64 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e039      	b.n	8002d20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10b      	bne.n	8002cca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	881a      	ldrh	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	e008      	b.n	8002cdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1cb      	bne.n	8002c92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa30 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e005      	b.n	8002d20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b8a      	ldr	r3, [pc, #552]	; (8002f7c <UART_SetConfig+0x254>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a78      	ldr	r2, [pc, #480]	; (8002f80 <UART_SetConfig+0x258>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d120      	bne.n	8002de6 <UART_SetConfig+0xbe>
 8002da4:	4b77      	ldr	r3, [pc, #476]	; (8002f84 <UART_SetConfig+0x25c>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d817      	bhi.n	8002de0 <UART_SetConfig+0xb8>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <UART_SetConfig+0x90>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd5 	.word	0x08002dd5
 8002dc0:	08002ddb 	.word	0x08002ddb
 8002dc4:	08002dcf 	.word	0x08002dcf
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e01d      	b.n	8002e0a <UART_SetConfig+0xe2>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e01a      	b.n	8002e0a <UART_SetConfig+0xe2>
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e017      	b.n	8002e0a <UART_SetConfig+0xe2>
 8002dda:	2308      	movs	r3, #8
 8002ddc:	77fb      	strb	r3, [r7, #31]
 8002dde:	e014      	b.n	8002e0a <UART_SetConfig+0xe2>
 8002de0:	2310      	movs	r3, #16
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e011      	b.n	8002e0a <UART_SetConfig+0xe2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <UART_SetConfig+0x260>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <UART_SetConfig+0xce>
 8002df0:	2300      	movs	r3, #0
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e009      	b.n	8002e0a <UART_SetConfig+0xe2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <UART_SetConfig+0x264>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <UART_SetConfig+0xde>
 8002e00:	2300      	movs	r3, #0
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e001      	b.n	8002e0a <UART_SetConfig+0xe2>
 8002e06:	2310      	movs	r3, #16
 8002e08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d15b      	bne.n	8002ecc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002e14:	7ffb      	ldrb	r3, [r7, #31]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d827      	bhi.n	8002e6a <UART_SetConfig+0x142>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <UART_SetConfig+0xf8>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e45 	.word	0x08002e45
 8002e24:	08002e4d 	.word	0x08002e4d
 8002e28:	08002e55 	.word	0x08002e55
 8002e2c:	08002e6b 	.word	0x08002e6b
 8002e30:	08002e5b 	.word	0x08002e5b
 8002e34:	08002e6b 	.word	0x08002e6b
 8002e38:	08002e6b 	.word	0x08002e6b
 8002e3c:	08002e6b 	.word	0x08002e6b
 8002e40:	08002e63 	.word	0x08002e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e44:	f7ff fd14 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8002e48:	61b8      	str	r0, [r7, #24]
        break;
 8002e4a:	e013      	b.n	8002e74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e4c:	f7ff fd32 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8002e50:	61b8      	str	r0, [r7, #24]
        break;
 8002e52:	e00f      	b.n	8002e74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e54:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <UART_SetConfig+0x268>)
 8002e56:	61bb      	str	r3, [r7, #24]
        break;
 8002e58:	e00c      	b.n	8002e74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e5a:	f7ff fc91 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 8002e5e:	61b8      	str	r0, [r7, #24]
        break;
 8002e60:	e008      	b.n	8002e74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e66:	61bb      	str	r3, [r7, #24]
        break;
 8002e68:	e004      	b.n	8002e74 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77bb      	strb	r3, [r7, #30]
        break;
 8002e72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d074      	beq.n	8002f64 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	005a      	lsls	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b0f      	cmp	r3, #15
 8002e96:	d916      	bls.n	8002ec6 <UART_SetConfig+0x19e>
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9e:	d212      	bcs.n	8002ec6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f023 030f 	bic.w	r3, r3, #15
 8002ea8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	89fb      	ldrh	r3, [r7, #14]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	89fa      	ldrh	r2, [r7, #14]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	e04e      	b.n	8002f64 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	77bb      	strb	r3, [r7, #30]
 8002eca:	e04b      	b.n	8002f64 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d827      	bhi.n	8002f22 <UART_SetConfig+0x1fa>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <UART_SetConfig+0x1b0>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002f05 	.word	0x08002f05
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f23 	.word	0x08002f23
 8002ee8:	08002f13 	.word	0x08002f13
 8002eec:	08002f23 	.word	0x08002f23
 8002ef0:	08002f23 	.word	0x08002f23
 8002ef4:	08002f23 	.word	0x08002f23
 8002ef8:	08002f1b 	.word	0x08002f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efc:	f7ff fcb8 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8002f00:	61b8      	str	r0, [r7, #24]
        break;
 8002f02:	e013      	b.n	8002f2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7ff fcd6 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8002f08:	61b8      	str	r0, [r7, #24]
        break;
 8002f0a:	e00f      	b.n	8002f2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <UART_SetConfig+0x268>)
 8002f0e:	61bb      	str	r3, [r7, #24]
        break;
 8002f10:	e00c      	b.n	8002f2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f12:	f7ff fc35 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 8002f16:	61b8      	str	r0, [r7, #24]
        break;
 8002f18:	e008      	b.n	8002f2c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1e:	61bb      	str	r3, [r7, #24]
        break;
 8002f20:	e004      	b.n	8002f2c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	77bb      	strb	r3, [r7, #30]
        break;
 8002f2a:	bf00      	nop
    }

    if (pclk != 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	085a      	lsrs	r2, r3, #1
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	d908      	bls.n	8002f60 <UART_SetConfig+0x238>
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d204      	bcs.n	8002f60 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	e001      	b.n	8002f64 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f70:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	efff69f3 	.word	0xefff69f3
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40004400 	.word	0x40004400
 8002f8c:	40004800 	.word	0x40004800
 8002f90:	007a1200 	.word	0x007a1200

08002f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01a      	beq.n	80030aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003092:	d10a      	bne.n	80030aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030e8:	f7fd fef0 	bl	8000ecc <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d10e      	bne.n	800311a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f82d 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e023      	b.n	8003162 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b04      	cmp	r3, #4
 8003126:	d10e      	bne.n	8003146 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f817 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e00d      	b.n	8003162 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b09c      	sub	sp, #112	; 0x70
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317a:	e0a5      	b.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003182:	f000 80a1 	beq.w	80032c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fd fea1 	bl	8000ecc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <UART_WaitOnFlagUntilTimeout+0x32>
 8003196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003198:	2b00      	cmp	r3, #0
 800319a:	d13e      	bne.n	800321a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031b0:	667b      	str	r3, [r7, #100]	; 0x64
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e6      	bne.n	800319c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3308      	adds	r3, #8
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	663b      	str	r3, [r7, #96]	; 0x60
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3308      	adds	r3, #8
 80031ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80031f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e067      	b.n	80032ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d04f      	beq.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003236:	d147      	bne.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003240:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003256:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
 8003262:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e6      	bne.n	8003242 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3308      	adds	r3, #8
 800327a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	613b      	str	r3, [r7, #16]
   return(result);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	66bb      	str	r3, [r7, #104]	; 0x68
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3308      	adds	r3, #8
 8003292:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003294:	623a      	str	r2, [r7, #32]
 8003296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003298:	69f9      	ldr	r1, [r7, #28]
 800329a:	6a3a      	ldr	r2, [r7, #32]
 800329c:	e841 2300 	strex	r3, r2, [r1]
 80032a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e5      	bne.n	8003274 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e010      	b.n	80032ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	f43f af4a 	beq.w	800317c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3770      	adds	r7, #112	; 0x70
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4d0d      	ldr	r5, [pc, #52]	; (800332c <__libc_init_array+0x38>)
 80032f8:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	2600      	movs	r6, #0
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	4d0b      	ldr	r5, [pc, #44]	; (8003334 <__libc_init_array+0x40>)
 8003306:	4c0c      	ldr	r4, [pc, #48]	; (8003338 <__libc_init_array+0x44>)
 8003308:	f000 f820 	bl	800334c <_init>
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	2600      	movs	r6, #0
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f855 3b04 	ldr.w	r3, [r5], #4
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f855 3b04 	ldr.w	r3, [r5], #4
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	080033a8 	.word	0x080033a8
 8003330:	080033a8 	.word	0x080033a8
 8003334:	080033a8 	.word	0x080033a8
 8003338:	080033ac 	.word	0x080033ac

0800333c <memset>:
 800333c:	4402      	add	r2, r0
 800333e:	4603      	mov	r3, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	f803 1b01 	strb.w	r1, [r3], #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
