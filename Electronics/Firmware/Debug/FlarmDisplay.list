
FlarmDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800428c  0800428c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800428c  0800428c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800428c  0800428c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000140  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018af  00000000  00000000  00029d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c0  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff07  00000000  00000000  0002c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d29  00000000  00000000  0004c36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baccd  00000000  00000000  00056098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110d65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026c0  00000000  00000000  00110db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fc4 	.word	0x08003fc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003fc4 	.word	0x08003fc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <processPFLAE>:

}

// PFLAE Error message format:
// PFLAE,<QueryType>,<Severity>,<ErrorCode>[,<Message>]
void processPFLAE(char *packet, struct errorRegister *reg) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	uint8_t tokenCount = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	73fb      	strb	r3, [r7, #15]
	char *token = strtok(packet, ",");
 800027e:	4918      	ldr	r1, [pc, #96]	; (80002e0 <processPFLAE+0x70>)
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f002 fdbd 	bl	8002e00 <strtok>
 8000286:	60b8      	str	r0, [r7, #8]
	while (1) {
		switch (tokenCount) {
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	2b02      	cmp	r3, #2
 800028c:	d002      	beq.n	8000294 <processPFLAE+0x24>
 800028e:	2b03      	cmp	r3, #3
 8000290:	d00d      	beq.n	80002ae <processPFLAE+0x3e>
 8000292:	e01b      	b.n	80002cc <processPFLAE+0x5c>
			case 2:
				reg->severity = (uint8_t)atoi(token);
 8000294:	68b8      	ldr	r0, [r7, #8]
 8000296:	f002 fd7c 	bl	8002d92 <atoi>
 800029a:	4603      	mov	r3, r0
 800029c:	f003 0303 	and.w	r3, r3, #3
 80002a0:	b2d9      	uxtb	r1, r3
 80002a2:	683a      	ldr	r2, [r7, #0]
 80002a4:	7813      	ldrb	r3, [r2, #0]
 80002a6:	f361 0301 	bfi	r3, r1, #0, #2
 80002aa:	7013      	strb	r3, [r2, #0]
				break;
 80002ac:	e00e      	b.n	80002cc <processPFLAE+0x5c>
			case 3:
				reg->errorCode = (uint16_t)strtol(token, NULL, 16);
 80002ae:	2210      	movs	r2, #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	68b8      	ldr	r0, [r7, #8]
 80002b4:	f002 fe82 	bl	8002fbc <strtol>
 80002b8:	4603      	mov	r3, r0
 80002ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002be:	b299      	uxth	r1, r3
 80002c0:	683a      	ldr	r2, [r7, #0]
 80002c2:	8813      	ldrh	r3, [r2, #0]
 80002c4:	f361 038d 	bfi	r3, r1, #2, #12
 80002c8:	8013      	strh	r3, [r2, #0]
				break;
 80002ca:	bf00      	nop
		}
		token = strtok(packet, ",");
 80002cc:	4904      	ldr	r1, [pc, #16]	; (80002e0 <processPFLAE+0x70>)
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f002 fd96 	bl	8002e00 <strtok>
 80002d4:	60b8      	str	r0, [r7, #8]
		tokenCount++;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	3301      	adds	r3, #1
 80002da:	73fb      	strb	r3, [r7, #15]
		switch (tokenCount) {
 80002dc:	e7d4      	b.n	8000288 <processPFLAE+0x18>
 80002de:	bf00      	nop
 80002e0:	08003fdc 	.word	0x08003fdc

080002e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002ea:	f000 fb09 	bl	8000900 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ee:	f000 f81f 	bl	8000330 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002f2:	f000 f8db 	bl	80004ac <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80002f6:	f000 f879 	bl	80003ec <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80002fa:	f000 f8a7 	bl	800044c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t startMsg[] = "Starting...";
 80002fe:	4a08      	ldr	r2, [pc, #32]	; (8000320 <main+0x3c>)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	ca07      	ldmia	r2, {r0, r1, r2}
 8000304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, startMsg, sizeof(startMsg), 10);
 8000308:	1d39      	adds	r1, r7, #4
 800030a:	230a      	movs	r3, #10
 800030c:	220c      	movs	r2, #12
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <main+0x40>)
 8000310:	f002 f9c6 	bl	80026a0 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		processPFLAE("$PFLAE,A,0,12,Supa message*50", &errorReg);
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <main+0x44>)
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <main+0x48>)
 8000318:	f7ff ffaa 	bl	8000270 <processPFLAE>
 800031c:	e7fa      	b.n	8000314 <main+0x30>
 800031e:	bf00      	nop
 8000320:	08004000 	.word	0x08004000
 8000324:	2000008c 	.word	0x2000008c
 8000328:	20000194 	.word	0x20000194
 800032c:	08003fe0 	.word	0x08003fe0

08000330 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b096      	sub	sp, #88	; 0x58
 8000334:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fd56 	bl	8002df0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000354:	463b      	mov	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]
 8000362:	615a      	str	r2, [r3, #20]
 8000364:	619a      	str	r2, [r3, #24]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000366:	2301      	movs	r3, #1
 8000368:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000374:	2301      	movs	r3, #1
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000380:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000382:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000386:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fd8d 	bl	8000eac <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x6c>
		Error_Handler();
 8000398:	f000 f8e8 	bl	800056c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800039c:	230f      	movs	r3, #15
 800039e:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	2302      	movs	r3, #2
 80003a2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ac:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003b2:	f107 031c 	add.w	r3, r7, #28
 80003b6:	2102      	movs	r1, #2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fdb5 	bl	8001f28 <HAL_RCC_ClockConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x98>
		Error_Handler();
 80003c4:	f000 f8d2 	bl	800056c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003d0:	463b      	mov	r3, r7
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 ffe0 	bl	8002398 <HAL_RCCEx_PeriphCLKConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xb2>
		Error_Handler();
 80003de:	f000 f8c5 	bl	800056c <Error_Handler>
	}
}
 80003e2:	bf00      	nop
 80003e4:	3758      	adds	r7, #88	; 0x58
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_USART1_UART_Init+0x58>)
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <MX_USART1_UART_Init+0x5c>)
 80003f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80003f6:	4b13      	ldr	r3, [pc, #76]	; (8000444 <MX_USART1_UART_Init+0x58>)
 80003f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800042e:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000430:	f002 f8e8 	bl	8002604 <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800043a:	f000 f897 	bl	800056c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	2000008c 	.word	0x2000008c
 8000448:	40013800 	.word	0x40013800

0800044c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <MX_USART2_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800045c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_USART2_UART_Init+0x58>)
 8000490:	f002 f8b8 	bl	8002604 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800049a:	f000 f867 	bl	800056c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000110 	.word	0x20000110
 80004a8:	40004400 	.word	0x40004400

080004ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80004c2:	4b28      	ldr	r3, [pc, #160]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a27      	ldr	r2, [pc, #156]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b22      	ldr	r3, [pc, #136]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a21      	ldr	r2, [pc, #132]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_GPIO_Init+0xb8>)
 80004f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_GPIO_Init+0xb8>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SIN_Pin | SCLK_Pin | LAT_Pin | BLANK_Pin,
 800050a:	2200      	movs	r2, #0
 800050c:	21f0      	movs	r1, #240	; 0xf0
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 fcb3 	bl	8000e7c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	4813      	ldr	r0, [pc, #76]	; (8000568 <MX_GPIO_Init+0xbc>)
 800051c:	f000 fcae 	bl	8000e7c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SIN_Pin SCLK_Pin LAT_Pin BLANK_Pin */
	GPIO_InitStruct.Pin = SIN_Pin | SCLK_Pin | LAT_Pin | BLANK_Pin;
 8000520:	23f0      	movs	r3, #240	; 0xf0
 8000522:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000528:	2302      	movs	r3, #2
 800052a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f000 fb2d 	bl	8000b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUZZER_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin;
 800053e:	2301      	movs	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000546:	2302      	movs	r3, #2
 8000548:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_GPIO_Init+0xbc>)
 8000556:	f000 fb1f 	bl	8000b98 <HAL_GPIO_Init>

}
 800055a:	bf00      	nop
 800055c:	3720      	adds	r7, #32
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400

0800056c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x44>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_MspInit+0x44>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <HAL_MspInit+0x44>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <HAL_MspInit+0x44>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_MspInit+0x44>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	; 0x30
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a2f      	ldr	r2, [pc, #188]	; (800069c <HAL_UART_MspInit+0xdc>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d12a      	bne.n	8000638 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e2:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 80005e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 8000600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000624:	2307      	movs	r3, #7
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fab1 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000636:	e02d      	b.n	8000694 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <HAL_UART_MspInit+0xe4>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d128      	bne.n	8000694 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_UART_MspInit+0xe0>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000672:	230c      	movs	r3, #12
 8000674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067e:	2303      	movs	r3, #3
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000682:	2307      	movs	r3, #7
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fa82 	bl	8000b98 <HAL_GPIO_Init>
}
 8000694:	bf00      	nop
 8000696:	3730      	adds	r7, #48	; 0x30
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40013800 	.word	0x40013800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40004400 	.word	0x40004400

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <MemManage_Handler+0x4>

080006ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f4:	f000 f94a 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	return 1;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_kill>:

int _kill(int pid, int sig)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000716:	f002 fb41 	bl	8002d9c <__errno>
 800071a:	4603      	mov	r3, r0
 800071c:	2216      	movs	r2, #22
 800071e:	601a      	str	r2, [r3, #0]
	return -1;
 8000720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_exit>:

void _exit (int status)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ffe7 	bl	800070c <_kill>
	while (1) {}		/* Make sure we hang here */
 800073e:	e7fe      	b.n	800073e <_exit+0x12>

08000740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	e00a      	b.n	8000768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000752:	f3af 8000 	nop.w
 8000756:	4601      	mov	r1, r0
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	60ba      	str	r2, [r7, #8]
 800075e:	b2ca      	uxtb	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbf0      	blt.n	8000752 <_read+0x12>
	}

return len;
 8000770:	687b      	ldr	r3, [r7, #4]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e009      	b.n	80007a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	60ba      	str	r2, [r7, #8]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	dbf1      	blt.n	800078c <_write+0x12>
	}
	return len;
 80007a8:	687b      	ldr	r3, [r7, #4]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <_close>:

int _close(int file)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007da:	605a      	str	r2, [r3, #4]
	return 0;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_isatty>:

int _isatty(int file)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <_sbrk+0x5c>)
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <_sbrk+0x60>)
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <_sbrk+0x64>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <_sbrk+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	429a      	cmp	r2, r3
 800084a:	d207      	bcs.n	800085c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800084c:	f002 faa6 	bl	8002d9c <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085a:	e009      	b.n	8000870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <_sbrk+0x64>)
 800086c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20003000 	.word	0x20003000
 800087c:	00000400 	.word	0x00000400
 8000880:	20000198 	.word	0x20000198
 8000884:	200001b0 	.word	0x200001b0

08000888 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d6:	f7ff ffd7 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f002 fa65 	bl	8002da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fd01 	bl	80002e4 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008f0:	08004294 	.word	0x08004294
  ldr r2, =_sbss
 80008f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008f8:	200001b0 	.word	0x200001b0

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f90d 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fe2c 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f917 	bl	8000b7e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000968:	f000 f8ed 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	2000019c 	.word	0x2000019c

080009b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000019c 	.word	0x2000019c

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff47 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5c 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb0 	bl	8000aec <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e14e      	b.n	8000e46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8140 	beq.w	8000e40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x40>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	f003 0201 	and.w	r2, r3, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	6939      	ldr	r1, [r7, #16]
 8000cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0203 	and.w	r2, r3, #3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 809a 	beq.w	8000e40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0c:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a54      	ldr	r2, [pc, #336]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d24:	4a50      	ldr	r2, [pc, #320]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d4e:	d013      	beq.n	8000d78 <HAL_GPIO_Init+0x1e0>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a46      	ldr	r2, [pc, #280]	; (8000e6c <HAL_GPIO_Init+0x2d4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d00d      	beq.n	8000d74 <HAL_GPIO_Init+0x1dc>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a45      	ldr	r2, [pc, #276]	; (8000e70 <HAL_GPIO_Init+0x2d8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d007      	beq.n	8000d70 <HAL_GPIO_Init+0x1d8>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d101      	bne.n	8000d6c <HAL_GPIO_Init+0x1d4>
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x1e2>
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	e004      	b.n	8000d7a <HAL_GPIO_Init+0x1e2>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0x1e2>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_Init+0x1e2>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	f002 0203 	and.w	r2, r2, #3
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d8a:	4937      	ldr	r1, [pc, #220]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dbc:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de6:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e10:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f47f aea9 	bne.w	8000ba8 <HAL_GPIO_Init+0x10>
  }
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	48000800 	.word	0x48000800
 8000e74:	48000c00 	.word	0x48000c00
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ebc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f001 b823 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 817d 	beq.w	80011e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ee8:	4bbc      	ldr	r3, [pc, #752]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d00c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	4bb9      	ldr	r3, [pc, #740]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d15c      	bne.n	8000fba <HAL_RCC_OscConfig+0x10e>
 8000f00:	4bb6      	ldr	r3, [pc, #728]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d155      	bne.n	8000fba <HAL_RCC_OscConfig+0x10e>
 8000f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f12:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	095b      	lsrs	r3, r3, #5
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d102      	bne.n	8000f40 <HAL_RCC_OscConfig+0x94>
 8000f3a:	4ba8      	ldr	r3, [pc, #672]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	e015      	b.n	8000f6c <HAL_RCC_OscConfig+0xc0>
 8000f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f44:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f48:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f58:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f5c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f68:	4b9c      	ldr	r3, [pc, #624]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f70:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f74:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f78:	fa92 f2a2 	rbit	r2, r2
 8000f7c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f80:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f84:	fab2 f282 	clz	r2, r2
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	f042 0220 	orr.w	r2, r2, #32
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	f002 021f 	and.w	r2, r2, #31
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 811f 	beq.w	80011e0 <HAL_RCC_OscConfig+0x334>
 8000fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f040 8116 	bne.w	80011e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f000 bfaf 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x12e>
 8000fcc:	4b83      	ldr	r3, [pc, #524]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a82      	ldr	r2, [pc, #520]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e036      	b.n	8001048 <HAL_RCC_OscConfig+0x19c>
 8000fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x158>
 8000fea:	4b7c      	ldr	r3, [pc, #496]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7b      	ldr	r2, [pc, #492]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b79      	ldr	r3, [pc, #484]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a78      	ldr	r2, [pc, #480]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e021      	b.n	8001048 <HAL_RCC_OscConfig+0x19c>
 8001004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x184>
 8001016:	4b71      	ldr	r3, [pc, #452]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a70      	ldr	r2, [pc, #448]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6e      	ldr	r3, [pc, #440]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6d      	ldr	r2, [pc, #436]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0x19c>
 8001030:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a66      	ldr	r2, [pc, #408]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	f023 020f 	bic.w	r2, r3, #15
 8001050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	495f      	ldr	r1, [pc, #380]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 800105e:	4313      	orrs	r3, r2
 8001060:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d059      	beq.n	8001126 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fc9f 	bl	80009b4 <HAL_GetTick>
 8001076:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	e00a      	b.n	8001092 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fc9a 	bl	80009b4 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	; 0x64
 800108a:	d902      	bls.n	8001092 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	f000 bf43 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001096:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d102      	bne.n	80010c4 <HAL_RCC_OscConfig+0x218>
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	e015      	b.n	80010f0 <HAL_RCC_OscConfig+0x244>
 80010c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010ec:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010fc:	fa92 f2a2 	rbit	r2, r2
 8001100:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001104:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f002 021f 	and.w	r2, r2, #31
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0ab      	beq.n	800107c <HAL_RCC_OscConfig+0x1d0>
 8001124:	e05d      	b.n	80011e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fc45 	bl	80009b4 <HAL_GetTick>
 800112a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	e00a      	b.n	8001146 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fc40 	bl	80009b4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b64      	cmp	r3, #100	; 0x64
 800113e:	d902      	bls.n	8001146 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	f000 bee9 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800115a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <HAL_RCC_OscConfig+0x2cc>
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	e015      	b.n	80011a4 <HAL_RCC_OscConfig+0x2f8>
 8001178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800118c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001190:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001194:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011b0:	fa92 f2a2 	rbit	r2, r2
 80011b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	f042 0220 	orr.w	r2, r2, #32
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f002 021f 	and.w	r2, r2, #31
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ab      	bne.n	8001130 <HAL_RCC_OscConfig+0x284>
 80011d8:	e003      	b.n	80011e2 <HAL_RCC_OscConfig+0x336>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 817d 	beq.w	80014f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011f8:	4ba6      	ldr	r3, [pc, #664]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001204:	4ba3      	ldr	r3, [pc, #652]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b08      	cmp	r3, #8
 800120e:	d172      	bne.n	80012f6 <HAL_RCC_OscConfig+0x44a>
 8001210:	4ba0      	ldr	r3, [pc, #640]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d16c      	bne.n	80012f6 <HAL_RCC_OscConfig+0x44a>
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800122e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <HAL_RCC_OscConfig+0x3a0>
 8001246:	4b93      	ldr	r3, [pc, #588]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	e013      	b.n	8001274 <HAL_RCC_OscConfig+0x3c8>
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001264:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001270:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2202      	movs	r2, #2
 8001276:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800127a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001286:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800128a:	fab2 f282 	clz	r2, r2
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	f042 0220 	orr.w	r2, r2, #32
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f002 021f 	and.w	r2, r2, #31
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00a      	beq.n	80012bc <HAL_RCC_OscConfig+0x410>
 80012a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d002      	beq.n	80012bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f000 be2e 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b75      	ldr	r3, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	21f8      	movs	r1, #248	; 0xf8
 80012d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012da:	fa91 f1a1 	rbit	r1, r1
 80012de:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012e6:	fab1 f181 	clz	r1, r1
 80012ea:	b2c9      	uxtb	r1, r1
 80012ec:	408b      	lsls	r3, r1
 80012ee:	4969      	ldr	r1, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f4:	e0fd      	b.n	80014f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8088 	beq.w	8001418 <HAL_RCC_OscConfig+0x56c>
 8001308:	2301      	movs	r3, #1
 800130a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800131a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	461a      	mov	r2, r3
 8001330:	2301      	movs	r3, #1
 8001332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fb3e 	bl	80009b4 <HAL_GetTick>
 8001338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fb39 	bl	80009b4 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d902      	bls.n	8001354 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	f000 bde2 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001366:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <HAL_RCC_OscConfig+0x4d8>
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	e013      	b.n	80013ac <HAL_RCC_OscConfig+0x500>
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800139c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013a8:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	2202      	movs	r2, #2
 80013ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013b6:	fa92 f2a2 	rbit	r2, r2
 80013ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013c2:	fab2 f282 	clz	r2, r2
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	f042 0220 	orr.w	r2, r2, #32
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	f002 021f 	and.w	r2, r2, #31
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f202 	lsl.w	r2, r1, r2
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0af      	beq.n	800133e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	21f8      	movs	r1, #248	; 0xf8
 80013f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013fc:	fa91 f1a1 	rbit	r1, r1
 8001400:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001404:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001408:	fab1 f181 	clz	r1, r1
 800140c:	b2c9      	uxtb	r1, r1
 800140e:	408b      	lsls	r3, r1
 8001410:	4920      	ldr	r1, [pc, #128]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
 8001416:	e06c      	b.n	80014f2 <HAL_RCC_OscConfig+0x646>
 8001418:	2301      	movs	r3, #1
 800141a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800142a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001438:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	461a      	mov	r2, r3
 8001440:	2300      	movs	r3, #0
 8001442:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fab6 	bl	80009b4 <HAL_GetTick>
 8001448:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fab1 	bl	80009b4 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d902      	bls.n	8001464 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	f000 bd5a 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	095b      	lsrs	r3, r3, #5
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d104      	bne.n	8001498 <HAL_RCC_OscConfig+0x5ec>
 800148e:	4b01      	ldr	r3, [pc, #4]	; (8001494 <HAL_RCC_OscConfig+0x5e8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	e015      	b.n	80014c0 <HAL_RCC_OscConfig+0x614>
 8001494:	40021000 	.word	0x40021000
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014bc:	4bc8      	ldr	r3, [pc, #800]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2202      	movs	r2, #2
 80014c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ca:	fa92 f2a2 	rbit	r2, r2
 80014ce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014d6:	fab2 f282 	clz	r2, r2
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f002 021f 	and.w	r2, r2, #31
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ad      	bne.n	800144e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8110 	beq.w	8001728 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d079      	beq.n	800160c <HAL_RCC_OscConfig+0x760>
 8001518:	2301      	movs	r3, #1
 800151a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800152a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4bab      	ldr	r3, [pc, #684]	; (80017e4 <HAL_RCC_OscConfig+0x938>)
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	461a      	mov	r2, r3
 800153e:	2301      	movs	r3, #1
 8001540:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fa37 	bl	80009b4 <HAL_GetTick>
 8001546:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fa32 	bl	80009b4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d902      	bls.n	8001562 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	f000 bcdb 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800157c:	2202      	movs	r2, #2
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	fa93 f2a3 	rbit	r2, r3
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015a0:	2202      	movs	r2, #2
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	fa93 f2a3 	rbit	r2, r3
 80015b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015bc:	4b88      	ldr	r3, [pc, #544]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 80015be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015c8:	2102      	movs	r1, #2
 80015ca:	6019      	str	r1, [r3, #0]
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fa93 f1a3 	rbit	r1, r3
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e2:	6019      	str	r1, [r3, #0]
  return result;
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0a0      	beq.n	800154c <HAL_RCC_OscConfig+0x6a0>
 800160a:	e08d      	b.n	8001728 <HAL_RCC_OscConfig+0x87c>
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fa93 f2a3 	rbit	r2, r3
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800162e:	601a      	str	r2, [r3, #0]
  return result;
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001638:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	4b68      	ldr	r3, [pc, #416]	; (80017e4 <HAL_RCC_OscConfig+0x938>)
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	461a      	mov	r2, r3
 800164a:	2300      	movs	r3, #0
 800164c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff f9b1 	bl	80009b4 <HAL_GetTick>
 8001652:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff f9ac 	bl	80009b4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d902      	bls.n	800166e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	f000 bc55 	b.w	8001f18 <HAL_RCC_OscConfig+0x106c>
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 80016dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016e6:	2102      	movs	r1, #2
 80016e8:	6019      	str	r1, [r3, #0]
 80016ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f1a3 	rbit	r1, r3
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001700:	6019      	str	r1, [r3, #0]
  return result;
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d197      	bne.n	8001658 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 81a1 	beq.w	8001a80 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d116      	bne.n	800177e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001776:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001778:	2301      	movs	r3, #1
 800177a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_RCC_OscConfig+0x93c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_RCC_OscConfig+0x93c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_RCC_OscConfig+0x93c>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001794:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001796:	f7ff f90d 	bl	80009b4 <HAL_GetTick>
 800179a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	e009      	b.n	80017b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a0:	f7ff f908 	bl	80009b4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e3b1      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_RCC_OscConfig+0x93c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ef      	beq.n	80017a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10d      	bne.n	80017ec <HAL_RCC_OscConfig+0x940>
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a02      	ldr	r2, [pc, #8]	; (80017e0 <HAL_RCC_OscConfig+0x934>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	e03c      	b.n	8001858 <HAL_RCC_OscConfig+0x9ac>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	10908120 	.word	0x10908120
 80017e8:	40007000 	.word	0x40007000
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x96a>
 80017fc:	4bc1      	ldr	r3, [pc, #772]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4ac0      	ldr	r2, [pc, #768]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	4bbe      	ldr	r3, [pc, #760]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4abd      	ldr	r2, [pc, #756]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 800180e:	f023 0304 	bic.w	r3, r3, #4
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e020      	b.n	8001858 <HAL_RCC_OscConfig+0x9ac>
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b05      	cmp	r3, #5
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x994>
 8001826:	4bb7      	ldr	r3, [pc, #732]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4ab6      	ldr	r2, [pc, #728]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4bb4      	ldr	r3, [pc, #720]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4ab3      	ldr	r2, [pc, #716]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0x9ac>
 8001840:	4bb0      	ldr	r3, [pc, #704]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4aaf      	ldr	r2, [pc, #700]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	4bad      	ldr	r3, [pc, #692]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4aac      	ldr	r2, [pc, #688]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8081 	beq.w	800196c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff f8a3 	bl	80009b4 <HAL_GetTick>
 800186e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff f89e 	bl	80009b4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e345      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001894:	2202      	movs	r2, #2
 8001896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fa93 f2a3 	rbit	r2, r3
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018d2:	601a      	str	r2, [r3, #0]
  return result;
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	095b      	lsrs	r3, r3, #5
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_OscConfig+0xa4c>
 80018f2:	4b84      	ldr	r3, [pc, #528]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0xa74>
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001924:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001928:	2102      	movs	r1, #2
 800192a:	6011      	str	r1, [r2, #0]
 800192c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001930:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	fa92 f1a2 	rbit	r1, r2
 800193a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001942:	6011      	str	r1, [r2, #0]
  return result;
 8001944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001948:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	fab2 f282 	clz	r2, r2
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	f002 021f 	and.w	r2, r2, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d084      	beq.n	8001874 <HAL_RCC_OscConfig+0x9c8>
 800196a:	e07f      	b.n	8001a6c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff f822 	bl	80009b4 <HAL_GetTick>
 8001970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	e00b      	b.n	800198e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f81d 	bl	80009b4 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e2c4      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001996:	2202      	movs	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019d4:	601a      	str	r2, [r3, #0]
  return result;
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0xb4e>
 80019f4:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0xb76>
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a02:	2202      	movs	r2, #2
 8001a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fa93 f2a3 	rbit	r2, r3
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	6011      	str	r1, [r2, #0]
 8001a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	fa92 f1a2 	rbit	r1, r2
 8001a3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a44:	6011      	str	r1, [r2, #0]
  return result;
 8001a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fab2 f282 	clz	r2, r2
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f002 021f 	and.w	r2, r2, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d184      	bne.n	8001976 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a6c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8242 	beq.w	8001f16 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_RCC_OscConfig+0xc58>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	f000 8213 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	f040 8162 	bne.w	8001d76 <HAL_RCC_OscConfig+0xeca>
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ae0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	461a      	mov	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe ff5c 	bl	80009b4 <HAL_GetTick>
 8001afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	e00c      	b.n	8001b1c <HAL_RCC_OscConfig+0xc70>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7fe ff54 	bl	80009b4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1fd      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b40:	601a      	str	r2, [r3, #0]
  return result;
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0xcba>
 8001b60:	4bb0      	ldr	r3, [pc, #704]	; (8001e24 <HAL_RCC_OscConfig+0xf78>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e027      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd0a>
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	4b9c      	ldr	r3, [pc, #624]	; (8001e24 <HAL_RCC_OscConfig+0xf78>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc2:	6011      	str	r1, [r2, #0]
 8001bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	fa92 f1a2 	rbit	r1, r2
 8001bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bda:	6011      	str	r1, [r2, #0]
  return result;
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	fab2 f282 	clz	r2, r2
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f042 0220 	orr.w	r2, r2, #32
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f002 021f 	and.w	r2, r2, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d182      	bne.n	8001b08 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0xf78>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	430b      	orrs	r3, r1
 8001c24:	497f      	ldr	r1, [pc, #508]	; (8001e24 <HAL_RCC_OscConfig+0xf78>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c58:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fea0 	bl	80009b4 <HAL_GetTick>
 8001c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fe9b 	bl	80009b4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e144      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xe2c>
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_RCC_OscConfig+0xf78>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e027      	b.n	8001d28 <HAL_RCC_OscConfig+0xe7c>
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fa93 f2a3 	rbit	r2, r3
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_OscConfig+0xf78>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d34:	6011      	str	r1, [r2, #0]
 8001d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fa92 f1a2 	rbit	r1, r2
 8001d44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d4c:	6011      	str	r1, [r2, #0]
  return result;
 8001d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f042 0220 	orr.w	r2, r2, #32
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	f002 021f 	and.w	r2, r2, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d082      	beq.n	8001c7a <HAL_RCC_OscConfig+0xdce>
 8001d74:	e0cf      	b.n	8001f16 <HAL_RCC_OscConfig+0x106a>
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d9a:	601a      	str	r2, [r3, #0]
  return result;
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001da4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fdfa 	bl	80009b4 <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fdf5 	bl	80009b4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e09e      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dfe:	601a      	str	r2, [r3, #0]
  return result;
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d104      	bne.n	8001e28 <HAL_RCC_OscConfig+0xf7c>
 8001e1e:	4b01      	ldr	r3, [pc, #4]	; (8001e24 <HAL_RCC_OscConfig+0xf78>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e029      	b.n	8001e78 <HAL_RCC_OscConfig+0xfcc>
 8001e24:	40021000 	.word	0x40021000
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fa93 f2a3 	rbit	r2, r3
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_OscConfig+0x1078>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e7c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e84:	6011      	str	r1, [r2, #0]
 8001e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	fa92 f1a2 	rbit	r1, r2
 8001e94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e98:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e9c:	6011      	str	r1, [r2, #0]
  return result;
 8001e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0220 	orr.w	r2, r2, #32
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d180      	bne.n	8001dc6 <HAL_RCC_OscConfig+0xf1a>
 8001ec4:	e027      	b.n	8001f16 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e01e      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCC_OscConfig+0x1078>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ee2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ee6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d10b      	bne.n	8001f12 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001efa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001efe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b09e      	sub	sp, #120	; 0x78
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e162      	b.n	8002206 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b90      	ldr	r3, [pc, #576]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d910      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b8d      	ldr	r3, [pc, #564]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	498b      	ldr	r1, [pc, #556]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e14a      	b.n	8002206 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b82      	ldr	r3, [pc, #520]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	497f      	ldr	r1, [pc, #508]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80dc 	beq.w	8002154 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d13c      	bne.n	800201e <HAL_RCC_ClockConfig+0xf6>
 8001fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_ClockConfig+0xa6>
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	e00f      	b.n	8001fee <HAL_RCC_ClockConfig+0xc6>
 8001fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	667b      	str	r3, [r7, #100]	; 0x64
 8001fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8001fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ff2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f002 021f 	and.w	r2, r2, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d17b      	bne.n	8002112 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0f3      	b.n	8002206 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d13c      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x178>
 8002026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_ClockConfig+0x128>
 800204a:	4b4f      	ldr	r3, [pc, #316]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e00f      	b.n	8002070 <HAL_RCC_ClockConfig+0x148>
 8002050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	647b      	str	r3, [r7, #68]	; 0x44
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	643b      	str	r3, [r7, #64]	; 0x40
 8002064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206c:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002074:	63ba      	str	r2, [r7, #56]	; 0x38
 8002076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002078:	fa92 f2a2 	rbit	r2, r2
 800207c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800207e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d13a      	bne.n	8002112 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b2      	b.n	8002206 <HAL_RCC_ClockConfig+0x2de>
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d102      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x1a0>
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	e00d      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1bc>
 80020c8:	2302      	movs	r3, #2
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2202      	movs	r2, #2
 80020e6:	61ba      	str	r2, [r7, #24]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	fa92 f2a2 	rbit	r2, r2
 80020ee:	617a      	str	r2, [r7, #20]
  return result;
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	fab2 f282 	clz	r2, r2
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f042 0220 	orr.w	r2, r2, #32
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f002 021f 	and.w	r2, r2, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f202 	lsl.w	r2, r1, r2
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e079      	b.n	8002206 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	491a      	ldr	r1, [pc, #104]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7fe fc46 	bl	80009b4 <HAL_GetTick>
 8002128:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7fe fc42 	bl	80009b4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e061      	b.n	8002206 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_RCC_ClockConfig+0x260>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d214      	bcs.n	800218c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4906      	ldr	r1, [pc, #24]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e040      	b.n	8002206 <HAL_RCC_ClockConfig+0x2de>
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_ClockConfig+0x2e8>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	491a      	ldr	r1, [pc, #104]	; (8002210 <HAL_RCC_ClockConfig+0x2e8>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_RCC_ClockConfig+0x2e8>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4912      	ldr	r1, [pc, #72]	; (8002210 <HAL_RCC_ClockConfig+0x2e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ca:	f000 f829 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021ce:	4601      	mov	r1, r0
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_RCC_ClockConfig+0x2e8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d8:	22f0      	movs	r2, #240	; 0xf0
 80021da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	fa92 f2a2 	rbit	r2, r2
 80021e2:	60fa      	str	r2, [r7, #12]
  return result;
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	40d3      	lsrs	r3, r2
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x2ec>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	fa21 f303 	lsr.w	r3, r1, r3
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_RCC_ClockConfig+0x2f0>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x2f4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fb94 	bl	800092c <HAL_InitTick>
  
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3778      	adds	r7, #120	; 0x78
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	0800400c 	.word	0x0800400c
 8002218:	20000000 	.word	0x20000000
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b08b      	sub	sp, #44	; 0x2c
 8002224:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d002      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x30>
 800224a:	2b08      	cmp	r3, #8
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x36>
 800224e:	e03c      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002252:	623b      	str	r3, [r7, #32]
      break;
 8002254:	e03c      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800225c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002260:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	fa92 f2a2 	rbit	r2, r2
 8002268:	607a      	str	r2, [r7, #4]
  return result;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	40d3      	lsrs	r3, r2
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	220f      	movs	r2, #15
 8002284:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	60fa      	str	r2, [r7, #12]
  return result;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	40d3      	lsrs	r3, r2
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	e004      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	623b      	str	r3, [r7, #32]
      break;
 80022c8:	e002      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022cc:	623b      	str	r3, [r7, #32]
      break;
 80022ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	372c      	adds	r7, #44	; 0x2c
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	08004024 	.word	0x08004024
 80022ec:	08004034 	.word	0x08004034
 80022f0:	003d0900 	.word	0x003d0900
 80022f4:	007a1200 	.word	0x007a1200

080022f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_RCC_GetHCLKFreq+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000000 	.word	0x20000000

08002310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002316:	f7ff ffef 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 800231a:	4601      	mov	r1, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002324:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002328:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	fa92 f2a2 	rbit	r2, r2
 8002330:	603a      	str	r2, [r7, #0]
  return result;
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	40d3      	lsrs	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x40>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	0800401c 	.word	0x0800401c

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800235a:	f7ff ffcd 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 800235e:	4601      	mov	r1, r0
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002368:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800236c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	fa92 f2a2 	rbit	r2, r2
 8002374:	603a      	str	r2, [r7, #0]
  return result;
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	fab2 f282 	clz	r2, r2
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	40d3      	lsrs	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	0800401c 	.word	0x0800401c

08002398 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b092      	sub	sp, #72	; 0x48
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80cd 	beq.w	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023bc:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10e      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c8:	4b8b      	ldr	r3, [pc, #556]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4a8a      	ldr	r2, [pc, #552]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d2:	61d3      	str	r3, [r2, #28]
 80023d4:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b82      	ldr	r3, [pc, #520]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a81      	ldr	r2, [pc, #516]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fad9 	bl	80009b4 <HAL_GetTick>
 8002402:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fe fad5 	bl	80009b4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	; 0x64
 8002412:	d901      	bls.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0ea      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b78      	ldr	r3, [pc, #480]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002424:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800242e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d07d      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800243e:	429a      	cmp	r2, r3
 8002440:	d076      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002442:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	4b66      	ldr	r3, [pc, #408]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	2301      	movs	r3, #1
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	4b5d      	ldr	r3, [pc, #372]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	461a      	mov	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002498:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d045      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fa86 	bl	80009b4 <HAL_GetTick>
 80024a8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fa82 	bl	80009b4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e095      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x256>
 80024c2:	2302      	movs	r3, #2
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	2302      	movs	r3, #2
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	61fb      	str	r3, [r7, #28]
  return result;
 80024da:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d102      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	e007      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2202      	movs	r2, #2
 8002508:	613a      	str	r2, [r7, #16]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	fa92 f2a2 	rbit	r2, r2
 8002510:	60fa      	str	r2, [r7, #12]
  return result;
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	fab2 f282 	clz	r2, r2
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0bd      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002530:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	492e      	ldr	r1, [pc, #184]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	4313      	orrs	r3, r2
 8002540:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002542:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4922      	ldr	r1, [pc, #136]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	4313      	orrs	r3, r2
 8002572:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	f023 0210 	bic.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	491a      	ldr	r1, [pc, #104]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	4313      	orrs	r3, r2
 8002590:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	4913      	ldr	r1, [pc, #76]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	490b      	ldr	r1, [pc, #44]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3748      	adds	r7, #72	; 0x48
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
 8002600:	10908100 	.word	0x10908100

08002604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e040      	b.n	8002698 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd ffca 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8c0 	bl	80027c8 <UART_SetConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e022      	b.n	8002698 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f9ea 	bl	8002a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800266e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800267e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fa71 	bl	8002b78 <UART_CheckIdleState>
 8002696:	4603      	mov	r3, r0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	f040 8082 	bne.w	80027be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_UART_Transmit+0x26>
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07a      	b.n	80027c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Transmit+0x38>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e073      	b.n	80027c0 <HAL_UART_Transmit+0x120>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2221      	movs	r2, #33	; 0x21
 80026ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ee:	f7fe f961 	bl	80009b4 <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270c:	d108      	bne.n	8002720 <HAL_UART_Transmit+0x80>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e003      	b.n	8002728 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002730:	e02d      	b.n	800278e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa64 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e039      	b.n	80027c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275e:	b292      	uxth	r2, r2
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3302      	adds	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e008      	b.n	800277c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b292      	uxth	r2, r2
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1cb      	bne.n	8002732 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2140      	movs	r1, #64	; 0x40
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa30 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e005      	b.n	80027c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
  }
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b8a      	ldr	r3, [pc, #552]	; (8002a1c <UART_SetConfig+0x254>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	6979      	ldr	r1, [r7, #20]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	430a      	orrs	r2, r1
 8002838:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a78      	ldr	r2, [pc, #480]	; (8002a20 <UART_SetConfig+0x258>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d120      	bne.n	8002886 <UART_SetConfig+0xbe>
 8002844:	4b77      	ldr	r3, [pc, #476]	; (8002a24 <UART_SetConfig+0x25c>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d817      	bhi.n	8002880 <UART_SetConfig+0xb8>
 8002850:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <UART_SetConfig+0x90>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	08002869 	.word	0x08002869
 800285c:	08002875 	.word	0x08002875
 8002860:	0800287b 	.word	0x0800287b
 8002864:	0800286f 	.word	0x0800286f
 8002868:	2300      	movs	r3, #0
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e01d      	b.n	80028aa <UART_SetConfig+0xe2>
 800286e:	2302      	movs	r3, #2
 8002870:	77fb      	strb	r3, [r7, #31]
 8002872:	e01a      	b.n	80028aa <UART_SetConfig+0xe2>
 8002874:	2304      	movs	r3, #4
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e017      	b.n	80028aa <UART_SetConfig+0xe2>
 800287a:	2308      	movs	r3, #8
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e014      	b.n	80028aa <UART_SetConfig+0xe2>
 8002880:	2310      	movs	r3, #16
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e011      	b.n	80028aa <UART_SetConfig+0xe2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a67      	ldr	r2, [pc, #412]	; (8002a28 <UART_SetConfig+0x260>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d102      	bne.n	8002896 <UART_SetConfig+0xce>
 8002890:	2300      	movs	r3, #0
 8002892:	77fb      	strb	r3, [r7, #31]
 8002894:	e009      	b.n	80028aa <UART_SetConfig+0xe2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a64      	ldr	r2, [pc, #400]	; (8002a2c <UART_SetConfig+0x264>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d102      	bne.n	80028a6 <UART_SetConfig+0xde>
 80028a0:	2300      	movs	r3, #0
 80028a2:	77fb      	strb	r3, [r7, #31]
 80028a4:	e001      	b.n	80028aa <UART_SetConfig+0xe2>
 80028a6:	2310      	movs	r3, #16
 80028a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b2:	d15b      	bne.n	800296c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d827      	bhi.n	800290a <UART_SetConfig+0x142>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <UART_SetConfig+0xf8>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	080028e5 	.word	0x080028e5
 80028c4:	080028ed 	.word	0x080028ed
 80028c8:	080028f5 	.word	0x080028f5
 80028cc:	0800290b 	.word	0x0800290b
 80028d0:	080028fb 	.word	0x080028fb
 80028d4:	0800290b 	.word	0x0800290b
 80028d8:	0800290b 	.word	0x0800290b
 80028dc:	0800290b 	.word	0x0800290b
 80028e0:	08002903 	.word	0x08002903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e4:	f7ff fd14 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 80028e8:	61b8      	str	r0, [r7, #24]
        break;
 80028ea:	e013      	b.n	8002914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028ec:	f7ff fd32 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80028f0:	61b8      	str	r0, [r7, #24]
        break;
 80028f2:	e00f      	b.n	8002914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028f4:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <UART_SetConfig+0x268>)
 80028f6:	61bb      	str	r3, [r7, #24]
        break;
 80028f8:	e00c      	b.n	8002914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028fa:	f7ff fc91 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80028fe:	61b8      	str	r0, [r7, #24]
        break;
 8002900:	e008      	b.n	8002914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002906:	61bb      	str	r3, [r7, #24]
        break;
 8002908:	e004      	b.n	8002914 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	77bb      	strb	r3, [r7, #30]
        break;
 8002912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d074      	beq.n	8002a04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	005a      	lsls	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	b29b      	uxth	r3, r3
 8002930:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d916      	bls.n	8002966 <UART_SetConfig+0x19e>
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293e:	d212      	bcs.n	8002966 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f023 030f 	bic.w	r3, r3, #15
 8002948:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	b29a      	uxth	r2, r3
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	4313      	orrs	r3, r2
 800295a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	89fa      	ldrh	r2, [r7, #14]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	e04e      	b.n	8002a04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	77bb      	strb	r3, [r7, #30]
 800296a:	e04b      	b.n	8002a04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800296c:	7ffb      	ldrb	r3, [r7, #31]
 800296e:	2b08      	cmp	r3, #8
 8002970:	d827      	bhi.n	80029c2 <UART_SetConfig+0x1fa>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <UART_SetConfig+0x1b0>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	0800299d 	.word	0x0800299d
 800297c:	080029a5 	.word	0x080029a5
 8002980:	080029ad 	.word	0x080029ad
 8002984:	080029c3 	.word	0x080029c3
 8002988:	080029b3 	.word	0x080029b3
 800298c:	080029c3 	.word	0x080029c3
 8002990:	080029c3 	.word	0x080029c3
 8002994:	080029c3 	.word	0x080029c3
 8002998:	080029bb 	.word	0x080029bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800299c:	f7ff fcb8 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 80029a0:	61b8      	str	r0, [r7, #24]
        break;
 80029a2:	e013      	b.n	80029cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029a4:	f7ff fcd6 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80029a8:	61b8      	str	r0, [r7, #24]
        break;
 80029aa:	e00f      	b.n	80029cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <UART_SetConfig+0x268>)
 80029ae:	61bb      	str	r3, [r7, #24]
        break;
 80029b0:	e00c      	b.n	80029cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029b2:	f7ff fc35 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80029b6:	61b8      	str	r0, [r7, #24]
        break;
 80029b8:	e008      	b.n	80029cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029be:	61bb      	str	r3, [r7, #24]
        break;
 80029c0:	e004      	b.n	80029cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	77bb      	strb	r3, [r7, #30]
        break;
 80029ca:	bf00      	nop
    }

    if (pclk != 0U)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	085a      	lsrs	r2, r3, #1
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	441a      	add	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	d908      	bls.n	8002a00 <UART_SetConfig+0x238>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d204      	bcs.n	8002a00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	e001      	b.n	8002a04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a10:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	efff69f3 	.word	0xefff69f3
 8002a20:	40013800 	.word	0x40013800
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	40004800 	.word	0x40004800
 8002a30:	007a1200 	.word	0x007a1200

08002a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01a      	beq.n	8002b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b32:	d10a      	bne.n	8002b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b88:	f7fd ff14 	bl	80009b4 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d10e      	bne.n	8002bba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f82d 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e023      	b.n	8002c02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d10e      	bne.n	8002be6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f817 	bl	8002c0a <UART_WaitOnFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e00d      	b.n	8002c02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b09c      	sub	sp, #112	; 0x70
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1a:	e0a5      	b.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c22:	f000 80a1 	beq.w	8002d68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fd fec5 	bl	80009b4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x32>
 8002c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d13e      	bne.n	8002cba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c50:	667b      	str	r3, [r7, #100]	; 0x64
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e6      	bne.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3308      	adds	r3, #8
 8002c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	663b      	str	r3, [r7, #96]	; 0x60
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e067      	b.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d04f      	beq.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd6:	d147      	bne.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	e853 3f00 	ldrex	r3, [r3]
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
 8002d02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e6      	bne.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	e853 3f00 	ldrex	r3, [r3]
 8002d22:	613b      	str	r3, [r7, #16]
   return(result);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3308      	adds	r3, #8
 8002d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d34:	623a      	str	r2, [r7, #32]
 8002d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	69f9      	ldr	r1, [r7, #28]
 8002d3a:	6a3a      	ldr	r2, [r7, #32]
 8002d3c:	e841 2300 	strex	r3, r2, [r1]
 8002d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e5      	bne.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e010      	b.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4013      	ands	r3, r2
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	f43f af4a 	beq.w	8002c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3770      	adds	r7, #112	; 0x70
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <atoi>:
 8002d92:	220a      	movs	r2, #10
 8002d94:	2100      	movs	r1, #0
 8002d96:	f000 b911 	b.w	8002fbc <strtol>
	...

08002d9c <__errno>:
 8002d9c:	4b01      	ldr	r3, [pc, #4]	; (8002da4 <__errno+0x8>)
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	2000000c 	.word	0x2000000c

08002da8 <__libc_init_array>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	4d0d      	ldr	r5, [pc, #52]	; (8002de0 <__libc_init_array+0x38>)
 8002dac:	4c0d      	ldr	r4, [pc, #52]	; (8002de4 <__libc_init_array+0x3c>)
 8002dae:	1b64      	subs	r4, r4, r5
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	2600      	movs	r6, #0
 8002db4:	42a6      	cmp	r6, r4
 8002db6:	d109      	bne.n	8002dcc <__libc_init_array+0x24>
 8002db8:	4d0b      	ldr	r5, [pc, #44]	; (8002de8 <__libc_init_array+0x40>)
 8002dba:	4c0c      	ldr	r4, [pc, #48]	; (8002dec <__libc_init_array+0x44>)
 8002dbc:	f001 f902 	bl	8003fc4 <_init>
 8002dc0:	1b64      	subs	r4, r4, r5
 8002dc2:	10a4      	asrs	r4, r4, #2
 8002dc4:	2600      	movs	r6, #0
 8002dc6:	42a6      	cmp	r6, r4
 8002dc8:	d105      	bne.n	8002dd6 <__libc_init_array+0x2e>
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd0:	4798      	blx	r3
 8002dd2:	3601      	adds	r6, #1
 8002dd4:	e7ee      	b.n	8002db4 <__libc_init_array+0xc>
 8002dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dda:	4798      	blx	r3
 8002ddc:	3601      	adds	r6, #1
 8002dde:	e7f2      	b.n	8002dc6 <__libc_init_array+0x1e>
 8002de0:	0800428c 	.word	0x0800428c
 8002de4:	0800428c 	.word	0x0800428c
 8002de8:	0800428c 	.word	0x0800428c
 8002dec:	08004290 	.word	0x08004290

08002df0 <memset>:
 8002df0:	4402      	add	r2, r0
 8002df2:	4603      	mov	r3, r0
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d100      	bne.n	8002dfa <memset+0xa>
 8002df8:	4770      	bx	lr
 8002dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dfe:	e7f9      	b.n	8002df4 <memset+0x4>

08002e00 <strtok>:
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <strtok+0x5c>)
 8002e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e04:	681e      	ldr	r6, [r3, #0]
 8002e06:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8002e08:	4605      	mov	r5, r0
 8002e0a:	b9fc      	cbnz	r4, 8002e4c <strtok+0x4c>
 8002e0c:	2050      	movs	r0, #80	; 0x50
 8002e0e:	9101      	str	r1, [sp, #4]
 8002e10:	f000 f90e 	bl	8003030 <malloc>
 8002e14:	9901      	ldr	r1, [sp, #4]
 8002e16:	65b0      	str	r0, [r6, #88]	; 0x58
 8002e18:	4602      	mov	r2, r0
 8002e1a:	b920      	cbnz	r0, 8002e26 <strtok+0x26>
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <strtok+0x60>)
 8002e1e:	4811      	ldr	r0, [pc, #68]	; (8002e64 <strtok+0x64>)
 8002e20:	2157      	movs	r1, #87	; 0x57
 8002e22:	f000 f8d5 	bl	8002fd0 <__assert_func>
 8002e26:	e9c0 4400 	strd	r4, r4, [r0]
 8002e2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002e2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002e32:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002e36:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002e3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002e3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8002e42:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002e46:	6184      	str	r4, [r0, #24]
 8002e48:	7704      	strb	r4, [r0, #28]
 8002e4a:	6244      	str	r4, [r0, #36]	; 0x24
 8002e4c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4628      	mov	r0, r5
 8002e52:	b002      	add	sp, #8
 8002e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002e58:	f000 b806 	b.w	8002e68 <__strtok_r>
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	08004048 	.word	0x08004048
 8002e64:	0800405f 	.word	0x0800405f

08002e68 <__strtok_r>:
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b908      	cbnz	r0, 8002e70 <__strtok_r+0x8>
 8002e6c:	6810      	ldr	r0, [r2, #0]
 8002e6e:	b188      	cbz	r0, 8002e94 <__strtok_r+0x2c>
 8002e70:	4604      	mov	r4, r0
 8002e72:	4620      	mov	r0, r4
 8002e74:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002e78:	460f      	mov	r7, r1
 8002e7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002e7e:	b91e      	cbnz	r6, 8002e88 <__strtok_r+0x20>
 8002e80:	b965      	cbnz	r5, 8002e9c <__strtok_r+0x34>
 8002e82:	6015      	str	r5, [r2, #0]
 8002e84:	4628      	mov	r0, r5
 8002e86:	e005      	b.n	8002e94 <__strtok_r+0x2c>
 8002e88:	42b5      	cmp	r5, r6
 8002e8a:	d1f6      	bne.n	8002e7a <__strtok_r+0x12>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <__strtok_r+0xa>
 8002e90:	6014      	str	r4, [r2, #0]
 8002e92:	7003      	strb	r3, [r0, #0]
 8002e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e96:	461c      	mov	r4, r3
 8002e98:	e00c      	b.n	8002eb4 <__strtok_r+0x4c>
 8002e9a:	b915      	cbnz	r5, 8002ea2 <__strtok_r+0x3a>
 8002e9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002ea0:	460e      	mov	r6, r1
 8002ea2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002ea6:	42ab      	cmp	r3, r5
 8002ea8:	d1f7      	bne.n	8002e9a <__strtok_r+0x32>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f3      	beq.n	8002e96 <__strtok_r+0x2e>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002eb4:	6014      	str	r4, [r2, #0]
 8002eb6:	e7ed      	b.n	8002e94 <__strtok_r+0x2c>

08002eb8 <_strtol_l.constprop.0>:
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebe:	d001      	beq.n	8002ec4 <_strtol_l.constprop.0+0xc>
 8002ec0:	2b24      	cmp	r3, #36	; 0x24
 8002ec2:	d906      	bls.n	8002ed2 <_strtol_l.constprop.0+0x1a>
 8002ec4:	f7ff ff6a 	bl	8002d9c <__errno>
 8002ec8:	2316      	movs	r3, #22
 8002eca:	6003      	str	r3, [r0, #0]
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002fb8 <_strtol_l.constprop.0+0x100>
 8002ed6:	460d      	mov	r5, r1
 8002ed8:	462e      	mov	r6, r5
 8002eda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ede:	f814 700c 	ldrb.w	r7, [r4, ip]
 8002ee2:	f017 0708 	ands.w	r7, r7, #8
 8002ee6:	d1f7      	bne.n	8002ed8 <_strtol_l.constprop.0+0x20>
 8002ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8002eea:	d132      	bne.n	8002f52 <_strtol_l.constprop.0+0x9a>
 8002eec:	782c      	ldrb	r4, [r5, #0]
 8002eee:	2701      	movs	r7, #1
 8002ef0:	1cb5      	adds	r5, r6, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d05b      	beq.n	8002fae <_strtol_l.constprop.0+0xf6>
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d109      	bne.n	8002f0e <_strtol_l.constprop.0+0x56>
 8002efa:	2c30      	cmp	r4, #48	; 0x30
 8002efc:	d107      	bne.n	8002f0e <_strtol_l.constprop.0+0x56>
 8002efe:	782c      	ldrb	r4, [r5, #0]
 8002f00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002f04:	2c58      	cmp	r4, #88	; 0x58
 8002f06:	d14d      	bne.n	8002fa4 <_strtol_l.constprop.0+0xec>
 8002f08:	786c      	ldrb	r4, [r5, #1]
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	3502      	adds	r5, #2
 8002f0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8002f12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002f16:	f04f 0c00 	mov.w	ip, #0
 8002f1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8002f1e:	4666      	mov	r6, ip
 8002f20:	fb03 8a19 	mls	sl, r3, r9, r8
 8002f24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8002f28:	f1be 0f09 	cmp.w	lr, #9
 8002f2c:	d816      	bhi.n	8002f5c <_strtol_l.constprop.0+0xa4>
 8002f2e:	4674      	mov	r4, lr
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	dd24      	ble.n	8002f7e <_strtol_l.constprop.0+0xc6>
 8002f34:	f1bc 0f00 	cmp.w	ip, #0
 8002f38:	db1e      	blt.n	8002f78 <_strtol_l.constprop.0+0xc0>
 8002f3a:	45b1      	cmp	r9, r6
 8002f3c:	d31c      	bcc.n	8002f78 <_strtol_l.constprop.0+0xc0>
 8002f3e:	d101      	bne.n	8002f44 <_strtol_l.constprop.0+0x8c>
 8002f40:	45a2      	cmp	sl, r4
 8002f42:	db19      	blt.n	8002f78 <_strtol_l.constprop.0+0xc0>
 8002f44:	fb06 4603 	mla	r6, r6, r3, r4
 8002f48:	f04f 0c01 	mov.w	ip, #1
 8002f4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f50:	e7e8      	b.n	8002f24 <_strtol_l.constprop.0+0x6c>
 8002f52:	2c2b      	cmp	r4, #43	; 0x2b
 8002f54:	bf04      	itt	eq
 8002f56:	782c      	ldrbeq	r4, [r5, #0]
 8002f58:	1cb5      	addeq	r5, r6, #2
 8002f5a:	e7ca      	b.n	8002ef2 <_strtol_l.constprop.0+0x3a>
 8002f5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8002f60:	f1be 0f19 	cmp.w	lr, #25
 8002f64:	d801      	bhi.n	8002f6a <_strtol_l.constprop.0+0xb2>
 8002f66:	3c37      	subs	r4, #55	; 0x37
 8002f68:	e7e2      	b.n	8002f30 <_strtol_l.constprop.0+0x78>
 8002f6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8002f6e:	f1be 0f19 	cmp.w	lr, #25
 8002f72:	d804      	bhi.n	8002f7e <_strtol_l.constprop.0+0xc6>
 8002f74:	3c57      	subs	r4, #87	; 0x57
 8002f76:	e7db      	b.n	8002f30 <_strtol_l.constprop.0+0x78>
 8002f78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002f7c:	e7e6      	b.n	8002f4c <_strtol_l.constprop.0+0x94>
 8002f7e:	f1bc 0f00 	cmp.w	ip, #0
 8002f82:	da05      	bge.n	8002f90 <_strtol_l.constprop.0+0xd8>
 8002f84:	2322      	movs	r3, #34	; 0x22
 8002f86:	6003      	str	r3, [r0, #0]
 8002f88:	4646      	mov	r6, r8
 8002f8a:	b942      	cbnz	r2, 8002f9e <_strtol_l.constprop.0+0xe6>
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	e79e      	b.n	8002ece <_strtol_l.constprop.0+0x16>
 8002f90:	b107      	cbz	r7, 8002f94 <_strtol_l.constprop.0+0xdc>
 8002f92:	4276      	negs	r6, r6
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	d0f9      	beq.n	8002f8c <_strtol_l.constprop.0+0xd4>
 8002f98:	f1bc 0f00 	cmp.w	ip, #0
 8002f9c:	d000      	beq.n	8002fa0 <_strtol_l.constprop.0+0xe8>
 8002f9e:	1e69      	subs	r1, r5, #1
 8002fa0:	6011      	str	r1, [r2, #0]
 8002fa2:	e7f3      	b.n	8002f8c <_strtol_l.constprop.0+0xd4>
 8002fa4:	2430      	movs	r4, #48	; 0x30
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1b1      	bne.n	8002f0e <_strtol_l.constprop.0+0x56>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e7af      	b.n	8002f0e <_strtol_l.constprop.0+0x56>
 8002fae:	2c30      	cmp	r4, #48	; 0x30
 8002fb0:	d0a5      	beq.n	8002efe <_strtol_l.constprop.0+0x46>
 8002fb2:	230a      	movs	r3, #10
 8002fb4:	e7ab      	b.n	8002f0e <_strtol_l.constprop.0+0x56>
 8002fb6:	bf00      	nop
 8002fb8:	080040f9 	.word	0x080040f9

08002fbc <strtol>:
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	460a      	mov	r2, r1
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4802      	ldr	r0, [pc, #8]	; (8002fcc <strtol+0x10>)
 8002fc4:	6800      	ldr	r0, [r0, #0]
 8002fc6:	f7ff bf77 	b.w	8002eb8 <_strtol_l.constprop.0>
 8002fca:	bf00      	nop
 8002fcc:	2000000c 	.word	0x2000000c

08002fd0 <__assert_func>:
 8002fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <__assert_func+0x2c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4605      	mov	r5, r0
 8002fdc:	68d8      	ldr	r0, [r3, #12]
 8002fde:	b14c      	cbz	r4, 8002ff4 <__assert_func+0x24>
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <__assert_func+0x30>)
 8002fe2:	9100      	str	r1, [sp, #0]
 8002fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002fe8:	4906      	ldr	r1, [pc, #24]	; (8003004 <__assert_func+0x34>)
 8002fea:	462b      	mov	r3, r5
 8002fec:	f000 f80e 	bl	800300c <fiprintf>
 8002ff0:	f000 fcc4 	bl	800397c <abort>
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <__assert_func+0x38>)
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	e7f3      	b.n	8002fe2 <__assert_func+0x12>
 8002ffa:	bf00      	nop
 8002ffc:	2000000c 	.word	0x2000000c
 8003000:	080040bc 	.word	0x080040bc
 8003004:	080040c9 	.word	0x080040c9
 8003008:	080040f7 	.word	0x080040f7

0800300c <fiprintf>:
 800300c:	b40e      	push	{r1, r2, r3}
 800300e:	b503      	push	{r0, r1, lr}
 8003010:	4601      	mov	r1, r0
 8003012:	ab03      	add	r3, sp, #12
 8003014:	4805      	ldr	r0, [pc, #20]	; (800302c <fiprintf+0x20>)
 8003016:	f853 2b04 	ldr.w	r2, [r3], #4
 800301a:	6800      	ldr	r0, [r0, #0]
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f000 f919 	bl	8003254 <_vfiprintf_r>
 8003022:	b002      	add	sp, #8
 8003024:	f85d eb04 	ldr.w	lr, [sp], #4
 8003028:	b003      	add	sp, #12
 800302a:	4770      	bx	lr
 800302c:	2000000c 	.word	0x2000000c

08003030 <malloc>:
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <malloc+0xc>)
 8003032:	4601      	mov	r1, r0
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	f000 b86f 	b.w	8003118 <_malloc_r>
 800303a:	bf00      	nop
 800303c:	2000000c 	.word	0x2000000c

08003040 <_free_r>:
 8003040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003042:	2900      	cmp	r1, #0
 8003044:	d044      	beq.n	80030d0 <_free_r+0x90>
 8003046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800304a:	9001      	str	r0, [sp, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f1a1 0404 	sub.w	r4, r1, #4
 8003052:	bfb8      	it	lt
 8003054:	18e4      	addlt	r4, r4, r3
 8003056:	f000 feb9 	bl	8003dcc <__malloc_lock>
 800305a:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <_free_r+0x94>)
 800305c:	9801      	ldr	r0, [sp, #4]
 800305e:	6813      	ldr	r3, [r2, #0]
 8003060:	b933      	cbnz	r3, 8003070 <_free_r+0x30>
 8003062:	6063      	str	r3, [r4, #4]
 8003064:	6014      	str	r4, [r2, #0]
 8003066:	b003      	add	sp, #12
 8003068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800306c:	f000 beb4 	b.w	8003dd8 <__malloc_unlock>
 8003070:	42a3      	cmp	r3, r4
 8003072:	d908      	bls.n	8003086 <_free_r+0x46>
 8003074:	6825      	ldr	r5, [r4, #0]
 8003076:	1961      	adds	r1, r4, r5
 8003078:	428b      	cmp	r3, r1
 800307a:	bf01      	itttt	eq
 800307c:	6819      	ldreq	r1, [r3, #0]
 800307e:	685b      	ldreq	r3, [r3, #4]
 8003080:	1949      	addeq	r1, r1, r5
 8003082:	6021      	streq	r1, [r4, #0]
 8003084:	e7ed      	b.n	8003062 <_free_r+0x22>
 8003086:	461a      	mov	r2, r3
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	b10b      	cbz	r3, 8003090 <_free_r+0x50>
 800308c:	42a3      	cmp	r3, r4
 800308e:	d9fa      	bls.n	8003086 <_free_r+0x46>
 8003090:	6811      	ldr	r1, [r2, #0]
 8003092:	1855      	adds	r5, r2, r1
 8003094:	42a5      	cmp	r5, r4
 8003096:	d10b      	bne.n	80030b0 <_free_r+0x70>
 8003098:	6824      	ldr	r4, [r4, #0]
 800309a:	4421      	add	r1, r4
 800309c:	1854      	adds	r4, r2, r1
 800309e:	42a3      	cmp	r3, r4
 80030a0:	6011      	str	r1, [r2, #0]
 80030a2:	d1e0      	bne.n	8003066 <_free_r+0x26>
 80030a4:	681c      	ldr	r4, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	6053      	str	r3, [r2, #4]
 80030aa:	4421      	add	r1, r4
 80030ac:	6011      	str	r1, [r2, #0]
 80030ae:	e7da      	b.n	8003066 <_free_r+0x26>
 80030b0:	d902      	bls.n	80030b8 <_free_r+0x78>
 80030b2:	230c      	movs	r3, #12
 80030b4:	6003      	str	r3, [r0, #0]
 80030b6:	e7d6      	b.n	8003066 <_free_r+0x26>
 80030b8:	6825      	ldr	r5, [r4, #0]
 80030ba:	1961      	adds	r1, r4, r5
 80030bc:	428b      	cmp	r3, r1
 80030be:	bf04      	itt	eq
 80030c0:	6819      	ldreq	r1, [r3, #0]
 80030c2:	685b      	ldreq	r3, [r3, #4]
 80030c4:	6063      	str	r3, [r4, #4]
 80030c6:	bf04      	itt	eq
 80030c8:	1949      	addeq	r1, r1, r5
 80030ca:	6021      	streq	r1, [r4, #0]
 80030cc:	6054      	str	r4, [r2, #4]
 80030ce:	e7ca      	b.n	8003066 <_free_r+0x26>
 80030d0:	b003      	add	sp, #12
 80030d2:	bd30      	pop	{r4, r5, pc}
 80030d4:	200001a0 	.word	0x200001a0

080030d8 <sbrk_aligned>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	4e0e      	ldr	r6, [pc, #56]	; (8003114 <sbrk_aligned+0x3c>)
 80030dc:	460c      	mov	r4, r1
 80030de:	6831      	ldr	r1, [r6, #0]
 80030e0:	4605      	mov	r5, r0
 80030e2:	b911      	cbnz	r1, 80030ea <sbrk_aligned+0x12>
 80030e4:	f000 fb7a 	bl	80037dc <_sbrk_r>
 80030e8:	6030      	str	r0, [r6, #0]
 80030ea:	4621      	mov	r1, r4
 80030ec:	4628      	mov	r0, r5
 80030ee:	f000 fb75 	bl	80037dc <_sbrk_r>
 80030f2:	1c43      	adds	r3, r0, #1
 80030f4:	d00a      	beq.n	800310c <sbrk_aligned+0x34>
 80030f6:	1cc4      	adds	r4, r0, #3
 80030f8:	f024 0403 	bic.w	r4, r4, #3
 80030fc:	42a0      	cmp	r0, r4
 80030fe:	d007      	beq.n	8003110 <sbrk_aligned+0x38>
 8003100:	1a21      	subs	r1, r4, r0
 8003102:	4628      	mov	r0, r5
 8003104:	f000 fb6a 	bl	80037dc <_sbrk_r>
 8003108:	3001      	adds	r0, #1
 800310a:	d101      	bne.n	8003110 <sbrk_aligned+0x38>
 800310c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003110:	4620      	mov	r0, r4
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	200001a4 	.word	0x200001a4

08003118 <_malloc_r>:
 8003118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311c:	1ccd      	adds	r5, r1, #3
 800311e:	f025 0503 	bic.w	r5, r5, #3
 8003122:	3508      	adds	r5, #8
 8003124:	2d0c      	cmp	r5, #12
 8003126:	bf38      	it	cc
 8003128:	250c      	movcc	r5, #12
 800312a:	2d00      	cmp	r5, #0
 800312c:	4607      	mov	r7, r0
 800312e:	db01      	blt.n	8003134 <_malloc_r+0x1c>
 8003130:	42a9      	cmp	r1, r5
 8003132:	d905      	bls.n	8003140 <_malloc_r+0x28>
 8003134:	230c      	movs	r3, #12
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	2600      	movs	r6, #0
 800313a:	4630      	mov	r0, r6
 800313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003140:	4e2e      	ldr	r6, [pc, #184]	; (80031fc <_malloc_r+0xe4>)
 8003142:	f000 fe43 	bl	8003dcc <__malloc_lock>
 8003146:	6833      	ldr	r3, [r6, #0]
 8003148:	461c      	mov	r4, r3
 800314a:	bb34      	cbnz	r4, 800319a <_malloc_r+0x82>
 800314c:	4629      	mov	r1, r5
 800314e:	4638      	mov	r0, r7
 8003150:	f7ff ffc2 	bl	80030d8 <sbrk_aligned>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	4604      	mov	r4, r0
 8003158:	d14d      	bne.n	80031f6 <_malloc_r+0xde>
 800315a:	6834      	ldr	r4, [r6, #0]
 800315c:	4626      	mov	r6, r4
 800315e:	2e00      	cmp	r6, #0
 8003160:	d140      	bne.n	80031e4 <_malloc_r+0xcc>
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	4631      	mov	r1, r6
 8003166:	4638      	mov	r0, r7
 8003168:	eb04 0803 	add.w	r8, r4, r3
 800316c:	f000 fb36 	bl	80037dc <_sbrk_r>
 8003170:	4580      	cmp	r8, r0
 8003172:	d13a      	bne.n	80031ea <_malloc_r+0xd2>
 8003174:	6821      	ldr	r1, [r4, #0]
 8003176:	3503      	adds	r5, #3
 8003178:	1a6d      	subs	r5, r5, r1
 800317a:	f025 0503 	bic.w	r5, r5, #3
 800317e:	3508      	adds	r5, #8
 8003180:	2d0c      	cmp	r5, #12
 8003182:	bf38      	it	cc
 8003184:	250c      	movcc	r5, #12
 8003186:	4629      	mov	r1, r5
 8003188:	4638      	mov	r0, r7
 800318a:	f7ff ffa5 	bl	80030d8 <sbrk_aligned>
 800318e:	3001      	adds	r0, #1
 8003190:	d02b      	beq.n	80031ea <_malloc_r+0xd2>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	442b      	add	r3, r5
 8003196:	6023      	str	r3, [r4, #0]
 8003198:	e00e      	b.n	80031b8 <_malloc_r+0xa0>
 800319a:	6822      	ldr	r2, [r4, #0]
 800319c:	1b52      	subs	r2, r2, r5
 800319e:	d41e      	bmi.n	80031de <_malloc_r+0xc6>
 80031a0:	2a0b      	cmp	r2, #11
 80031a2:	d916      	bls.n	80031d2 <_malloc_r+0xba>
 80031a4:	1961      	adds	r1, r4, r5
 80031a6:	42a3      	cmp	r3, r4
 80031a8:	6025      	str	r5, [r4, #0]
 80031aa:	bf18      	it	ne
 80031ac:	6059      	strne	r1, [r3, #4]
 80031ae:	6863      	ldr	r3, [r4, #4]
 80031b0:	bf08      	it	eq
 80031b2:	6031      	streq	r1, [r6, #0]
 80031b4:	5162      	str	r2, [r4, r5]
 80031b6:	604b      	str	r3, [r1, #4]
 80031b8:	4638      	mov	r0, r7
 80031ba:	f104 060b 	add.w	r6, r4, #11
 80031be:	f000 fe0b 	bl	8003dd8 <__malloc_unlock>
 80031c2:	f026 0607 	bic.w	r6, r6, #7
 80031c6:	1d23      	adds	r3, r4, #4
 80031c8:	1af2      	subs	r2, r6, r3
 80031ca:	d0b6      	beq.n	800313a <_malloc_r+0x22>
 80031cc:	1b9b      	subs	r3, r3, r6
 80031ce:	50a3      	str	r3, [r4, r2]
 80031d0:	e7b3      	b.n	800313a <_malloc_r+0x22>
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	42a3      	cmp	r3, r4
 80031d6:	bf0c      	ite	eq
 80031d8:	6032      	streq	r2, [r6, #0]
 80031da:	605a      	strne	r2, [r3, #4]
 80031dc:	e7ec      	b.n	80031b8 <_malloc_r+0xa0>
 80031de:	4623      	mov	r3, r4
 80031e0:	6864      	ldr	r4, [r4, #4]
 80031e2:	e7b2      	b.n	800314a <_malloc_r+0x32>
 80031e4:	4634      	mov	r4, r6
 80031e6:	6876      	ldr	r6, [r6, #4]
 80031e8:	e7b9      	b.n	800315e <_malloc_r+0x46>
 80031ea:	230c      	movs	r3, #12
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4638      	mov	r0, r7
 80031f0:	f000 fdf2 	bl	8003dd8 <__malloc_unlock>
 80031f4:	e7a1      	b.n	800313a <_malloc_r+0x22>
 80031f6:	6025      	str	r5, [r4, #0]
 80031f8:	e7de      	b.n	80031b8 <_malloc_r+0xa0>
 80031fa:	bf00      	nop
 80031fc:	200001a0 	.word	0x200001a0

08003200 <__sfputc_r>:
 8003200:	6893      	ldr	r3, [r2, #8]
 8003202:	3b01      	subs	r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	b410      	push	{r4}
 8003208:	6093      	str	r3, [r2, #8]
 800320a:	da08      	bge.n	800321e <__sfputc_r+0x1e>
 800320c:	6994      	ldr	r4, [r2, #24]
 800320e:	42a3      	cmp	r3, r4
 8003210:	db01      	blt.n	8003216 <__sfputc_r+0x16>
 8003212:	290a      	cmp	r1, #10
 8003214:	d103      	bne.n	800321e <__sfputc_r+0x1e>
 8003216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800321a:	f000 baef 	b.w	80037fc <__swbuf_r>
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	1c58      	adds	r0, r3, #1
 8003222:	6010      	str	r0, [r2, #0]
 8003224:	7019      	strb	r1, [r3, #0]
 8003226:	4608      	mov	r0, r1
 8003228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800322c:	4770      	bx	lr

0800322e <__sfputs_r>:
 800322e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003230:	4606      	mov	r6, r0
 8003232:	460f      	mov	r7, r1
 8003234:	4614      	mov	r4, r2
 8003236:	18d5      	adds	r5, r2, r3
 8003238:	42ac      	cmp	r4, r5
 800323a:	d101      	bne.n	8003240 <__sfputs_r+0x12>
 800323c:	2000      	movs	r0, #0
 800323e:	e007      	b.n	8003250 <__sfputs_r+0x22>
 8003240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003244:	463a      	mov	r2, r7
 8003246:	4630      	mov	r0, r6
 8003248:	f7ff ffda 	bl	8003200 <__sfputc_r>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d1f3      	bne.n	8003238 <__sfputs_r+0xa>
 8003250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003254 <_vfiprintf_r>:
 8003254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	460d      	mov	r5, r1
 800325a:	b09d      	sub	sp, #116	; 0x74
 800325c:	4614      	mov	r4, r2
 800325e:	4698      	mov	r8, r3
 8003260:	4606      	mov	r6, r0
 8003262:	b118      	cbz	r0, 800326c <_vfiprintf_r+0x18>
 8003264:	6983      	ldr	r3, [r0, #24]
 8003266:	b90b      	cbnz	r3, 800326c <_vfiprintf_r+0x18>
 8003268:	f000 fcaa 	bl	8003bc0 <__sinit>
 800326c:	4b89      	ldr	r3, [pc, #548]	; (8003494 <_vfiprintf_r+0x240>)
 800326e:	429d      	cmp	r5, r3
 8003270:	d11b      	bne.n	80032aa <_vfiprintf_r+0x56>
 8003272:	6875      	ldr	r5, [r6, #4]
 8003274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003276:	07d9      	lsls	r1, r3, #31
 8003278:	d405      	bmi.n	8003286 <_vfiprintf_r+0x32>
 800327a:	89ab      	ldrh	r3, [r5, #12]
 800327c:	059a      	lsls	r2, r3, #22
 800327e:	d402      	bmi.n	8003286 <_vfiprintf_r+0x32>
 8003280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003282:	f000 fd3b 	bl	8003cfc <__retarget_lock_acquire_recursive>
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	d501      	bpl.n	8003290 <_vfiprintf_r+0x3c>
 800328c:	692b      	ldr	r3, [r5, #16]
 800328e:	b9eb      	cbnz	r3, 80032cc <_vfiprintf_r+0x78>
 8003290:	4629      	mov	r1, r5
 8003292:	4630      	mov	r0, r6
 8003294:	f000 fb04 	bl	80038a0 <__swsetup_r>
 8003298:	b1c0      	cbz	r0, 80032cc <_vfiprintf_r+0x78>
 800329a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800329c:	07dc      	lsls	r4, r3, #31
 800329e:	d50e      	bpl.n	80032be <_vfiprintf_r+0x6a>
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a4:	b01d      	add	sp, #116	; 0x74
 80032a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032aa:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <_vfiprintf_r+0x244>)
 80032ac:	429d      	cmp	r5, r3
 80032ae:	d101      	bne.n	80032b4 <_vfiprintf_r+0x60>
 80032b0:	68b5      	ldr	r5, [r6, #8]
 80032b2:	e7df      	b.n	8003274 <_vfiprintf_r+0x20>
 80032b4:	4b79      	ldr	r3, [pc, #484]	; (800349c <_vfiprintf_r+0x248>)
 80032b6:	429d      	cmp	r5, r3
 80032b8:	bf08      	it	eq
 80032ba:	68f5      	ldreq	r5, [r6, #12]
 80032bc:	e7da      	b.n	8003274 <_vfiprintf_r+0x20>
 80032be:	89ab      	ldrh	r3, [r5, #12]
 80032c0:	0598      	lsls	r0, r3, #22
 80032c2:	d4ed      	bmi.n	80032a0 <_vfiprintf_r+0x4c>
 80032c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032c6:	f000 fd1a 	bl	8003cfe <__retarget_lock_release_recursive>
 80032ca:	e7e9      	b.n	80032a0 <_vfiprintf_r+0x4c>
 80032cc:	2300      	movs	r3, #0
 80032ce:	9309      	str	r3, [sp, #36]	; 0x24
 80032d0:	2320      	movs	r3, #32
 80032d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80032da:	2330      	movs	r3, #48	; 0x30
 80032dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80034a0 <_vfiprintf_r+0x24c>
 80032e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032e4:	f04f 0901 	mov.w	r9, #1
 80032e8:	4623      	mov	r3, r4
 80032ea:	469a      	mov	sl, r3
 80032ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032f0:	b10a      	cbz	r2, 80032f6 <_vfiprintf_r+0xa2>
 80032f2:	2a25      	cmp	r2, #37	; 0x25
 80032f4:	d1f9      	bne.n	80032ea <_vfiprintf_r+0x96>
 80032f6:	ebba 0b04 	subs.w	fp, sl, r4
 80032fa:	d00b      	beq.n	8003314 <_vfiprintf_r+0xc0>
 80032fc:	465b      	mov	r3, fp
 80032fe:	4622      	mov	r2, r4
 8003300:	4629      	mov	r1, r5
 8003302:	4630      	mov	r0, r6
 8003304:	f7ff ff93 	bl	800322e <__sfputs_r>
 8003308:	3001      	adds	r0, #1
 800330a:	f000 80aa 	beq.w	8003462 <_vfiprintf_r+0x20e>
 800330e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003310:	445a      	add	r2, fp
 8003312:	9209      	str	r2, [sp, #36]	; 0x24
 8003314:	f89a 3000 	ldrb.w	r3, [sl]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80a2 	beq.w	8003462 <_vfiprintf_r+0x20e>
 800331e:	2300      	movs	r3, #0
 8003320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003328:	f10a 0a01 	add.w	sl, sl, #1
 800332c:	9304      	str	r3, [sp, #16]
 800332e:	9307      	str	r3, [sp, #28]
 8003330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003334:	931a      	str	r3, [sp, #104]	; 0x68
 8003336:	4654      	mov	r4, sl
 8003338:	2205      	movs	r2, #5
 800333a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333e:	4858      	ldr	r0, [pc, #352]	; (80034a0 <_vfiprintf_r+0x24c>)
 8003340:	f7fc ff46 	bl	80001d0 <memchr>
 8003344:	9a04      	ldr	r2, [sp, #16]
 8003346:	b9d8      	cbnz	r0, 8003380 <_vfiprintf_r+0x12c>
 8003348:	06d1      	lsls	r1, r2, #27
 800334a:	bf44      	itt	mi
 800334c:	2320      	movmi	r3, #32
 800334e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003352:	0713      	lsls	r3, r2, #28
 8003354:	bf44      	itt	mi
 8003356:	232b      	movmi	r3, #43	; 0x2b
 8003358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800335c:	f89a 3000 	ldrb.w	r3, [sl]
 8003360:	2b2a      	cmp	r3, #42	; 0x2a
 8003362:	d015      	beq.n	8003390 <_vfiprintf_r+0x13c>
 8003364:	9a07      	ldr	r2, [sp, #28]
 8003366:	4654      	mov	r4, sl
 8003368:	2000      	movs	r0, #0
 800336a:	f04f 0c0a 	mov.w	ip, #10
 800336e:	4621      	mov	r1, r4
 8003370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003374:	3b30      	subs	r3, #48	; 0x30
 8003376:	2b09      	cmp	r3, #9
 8003378:	d94e      	bls.n	8003418 <_vfiprintf_r+0x1c4>
 800337a:	b1b0      	cbz	r0, 80033aa <_vfiprintf_r+0x156>
 800337c:	9207      	str	r2, [sp, #28]
 800337e:	e014      	b.n	80033aa <_vfiprintf_r+0x156>
 8003380:	eba0 0308 	sub.w	r3, r0, r8
 8003384:	fa09 f303 	lsl.w	r3, r9, r3
 8003388:	4313      	orrs	r3, r2
 800338a:	9304      	str	r3, [sp, #16]
 800338c:	46a2      	mov	sl, r4
 800338e:	e7d2      	b.n	8003336 <_vfiprintf_r+0xe2>
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	1d19      	adds	r1, r3, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	9103      	str	r1, [sp, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	bfbb      	ittet	lt
 800339c:	425b      	neglt	r3, r3
 800339e:	f042 0202 	orrlt.w	r2, r2, #2
 80033a2:	9307      	strge	r3, [sp, #28]
 80033a4:	9307      	strlt	r3, [sp, #28]
 80033a6:	bfb8      	it	lt
 80033a8:	9204      	strlt	r2, [sp, #16]
 80033aa:	7823      	ldrb	r3, [r4, #0]
 80033ac:	2b2e      	cmp	r3, #46	; 0x2e
 80033ae:	d10c      	bne.n	80033ca <_vfiprintf_r+0x176>
 80033b0:	7863      	ldrb	r3, [r4, #1]
 80033b2:	2b2a      	cmp	r3, #42	; 0x2a
 80033b4:	d135      	bne.n	8003422 <_vfiprintf_r+0x1ce>
 80033b6:	9b03      	ldr	r3, [sp, #12]
 80033b8:	1d1a      	adds	r2, r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	9203      	str	r2, [sp, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bfb8      	it	lt
 80033c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033c6:	3402      	adds	r4, #2
 80033c8:	9305      	str	r3, [sp, #20]
 80033ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80034b0 <_vfiprintf_r+0x25c>
 80033ce:	7821      	ldrb	r1, [r4, #0]
 80033d0:	2203      	movs	r2, #3
 80033d2:	4650      	mov	r0, sl
 80033d4:	f7fc fefc 	bl	80001d0 <memchr>
 80033d8:	b140      	cbz	r0, 80033ec <_vfiprintf_r+0x198>
 80033da:	2340      	movs	r3, #64	; 0x40
 80033dc:	eba0 000a 	sub.w	r0, r0, sl
 80033e0:	fa03 f000 	lsl.w	r0, r3, r0
 80033e4:	9b04      	ldr	r3, [sp, #16]
 80033e6:	4303      	orrs	r3, r0
 80033e8:	3401      	adds	r4, #1
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f0:	482c      	ldr	r0, [pc, #176]	; (80034a4 <_vfiprintf_r+0x250>)
 80033f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033f6:	2206      	movs	r2, #6
 80033f8:	f7fc feea 	bl	80001d0 <memchr>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d03f      	beq.n	8003480 <_vfiprintf_r+0x22c>
 8003400:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <_vfiprintf_r+0x254>)
 8003402:	bb1b      	cbnz	r3, 800344c <_vfiprintf_r+0x1f8>
 8003404:	9b03      	ldr	r3, [sp, #12]
 8003406:	3307      	adds	r3, #7
 8003408:	f023 0307 	bic.w	r3, r3, #7
 800340c:	3308      	adds	r3, #8
 800340e:	9303      	str	r3, [sp, #12]
 8003410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003412:	443b      	add	r3, r7
 8003414:	9309      	str	r3, [sp, #36]	; 0x24
 8003416:	e767      	b.n	80032e8 <_vfiprintf_r+0x94>
 8003418:	fb0c 3202 	mla	r2, ip, r2, r3
 800341c:	460c      	mov	r4, r1
 800341e:	2001      	movs	r0, #1
 8003420:	e7a5      	b.n	800336e <_vfiprintf_r+0x11a>
 8003422:	2300      	movs	r3, #0
 8003424:	3401      	adds	r4, #1
 8003426:	9305      	str	r3, [sp, #20]
 8003428:	4619      	mov	r1, r3
 800342a:	f04f 0c0a 	mov.w	ip, #10
 800342e:	4620      	mov	r0, r4
 8003430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003434:	3a30      	subs	r2, #48	; 0x30
 8003436:	2a09      	cmp	r2, #9
 8003438:	d903      	bls.n	8003442 <_vfiprintf_r+0x1ee>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0c5      	beq.n	80033ca <_vfiprintf_r+0x176>
 800343e:	9105      	str	r1, [sp, #20]
 8003440:	e7c3      	b.n	80033ca <_vfiprintf_r+0x176>
 8003442:	fb0c 2101 	mla	r1, ip, r1, r2
 8003446:	4604      	mov	r4, r0
 8003448:	2301      	movs	r3, #1
 800344a:	e7f0      	b.n	800342e <_vfiprintf_r+0x1da>
 800344c:	ab03      	add	r3, sp, #12
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	462a      	mov	r2, r5
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <_vfiprintf_r+0x258>)
 8003454:	a904      	add	r1, sp, #16
 8003456:	4630      	mov	r0, r6
 8003458:	f3af 8000 	nop.w
 800345c:	4607      	mov	r7, r0
 800345e:	1c78      	adds	r0, r7, #1
 8003460:	d1d6      	bne.n	8003410 <_vfiprintf_r+0x1bc>
 8003462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003464:	07d9      	lsls	r1, r3, #31
 8003466:	d405      	bmi.n	8003474 <_vfiprintf_r+0x220>
 8003468:	89ab      	ldrh	r3, [r5, #12]
 800346a:	059a      	lsls	r2, r3, #22
 800346c:	d402      	bmi.n	8003474 <_vfiprintf_r+0x220>
 800346e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003470:	f000 fc45 	bl	8003cfe <__retarget_lock_release_recursive>
 8003474:	89ab      	ldrh	r3, [r5, #12]
 8003476:	065b      	lsls	r3, r3, #25
 8003478:	f53f af12 	bmi.w	80032a0 <_vfiprintf_r+0x4c>
 800347c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800347e:	e711      	b.n	80032a4 <_vfiprintf_r+0x50>
 8003480:	ab03      	add	r3, sp, #12
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	462a      	mov	r2, r5
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <_vfiprintf_r+0x258>)
 8003488:	a904      	add	r1, sp, #16
 800348a:	4630      	mov	r0, r6
 800348c:	f000 f880 	bl	8003590 <_printf_i>
 8003490:	e7e4      	b.n	800345c <_vfiprintf_r+0x208>
 8003492:	bf00      	nop
 8003494:	0800424c 	.word	0x0800424c
 8003498:	0800426c 	.word	0x0800426c
 800349c:	0800422c 	.word	0x0800422c
 80034a0:	080041f9 	.word	0x080041f9
 80034a4:	08004203 	.word	0x08004203
 80034a8:	00000000 	.word	0x00000000
 80034ac:	0800322f 	.word	0x0800322f
 80034b0:	080041ff 	.word	0x080041ff

080034b4 <_printf_common>:
 80034b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b8:	4616      	mov	r6, r2
 80034ba:	4699      	mov	r9, r3
 80034bc:	688a      	ldr	r2, [r1, #8]
 80034be:	690b      	ldr	r3, [r1, #16]
 80034c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c4:	4293      	cmp	r3, r2
 80034c6:	bfb8      	it	lt
 80034c8:	4613      	movlt	r3, r2
 80034ca:	6033      	str	r3, [r6, #0]
 80034cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034d0:	4607      	mov	r7, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	b10a      	cbz	r2, 80034da <_printf_common+0x26>
 80034d6:	3301      	adds	r3, #1
 80034d8:	6033      	str	r3, [r6, #0]
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	0699      	lsls	r1, r3, #26
 80034de:	bf42      	ittt	mi
 80034e0:	6833      	ldrmi	r3, [r6, #0]
 80034e2:	3302      	addmi	r3, #2
 80034e4:	6033      	strmi	r3, [r6, #0]
 80034e6:	6825      	ldr	r5, [r4, #0]
 80034e8:	f015 0506 	ands.w	r5, r5, #6
 80034ec:	d106      	bne.n	80034fc <_printf_common+0x48>
 80034ee:	f104 0a19 	add.w	sl, r4, #25
 80034f2:	68e3      	ldr	r3, [r4, #12]
 80034f4:	6832      	ldr	r2, [r6, #0]
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	42ab      	cmp	r3, r5
 80034fa:	dc26      	bgt.n	800354a <_printf_common+0x96>
 80034fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003500:	1e13      	subs	r3, r2, #0
 8003502:	6822      	ldr	r2, [r4, #0]
 8003504:	bf18      	it	ne
 8003506:	2301      	movne	r3, #1
 8003508:	0692      	lsls	r2, r2, #26
 800350a:	d42b      	bmi.n	8003564 <_printf_common+0xb0>
 800350c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003510:	4649      	mov	r1, r9
 8003512:	4638      	mov	r0, r7
 8003514:	47c0      	blx	r8
 8003516:	3001      	adds	r0, #1
 8003518:	d01e      	beq.n	8003558 <_printf_common+0xa4>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	68e5      	ldr	r5, [r4, #12]
 800351e:	6832      	ldr	r2, [r6, #0]
 8003520:	f003 0306 	and.w	r3, r3, #6
 8003524:	2b04      	cmp	r3, #4
 8003526:	bf08      	it	eq
 8003528:	1aad      	subeq	r5, r5, r2
 800352a:	68a3      	ldr	r3, [r4, #8]
 800352c:	6922      	ldr	r2, [r4, #16]
 800352e:	bf0c      	ite	eq
 8003530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003534:	2500      	movne	r5, #0
 8003536:	4293      	cmp	r3, r2
 8003538:	bfc4      	itt	gt
 800353a:	1a9b      	subgt	r3, r3, r2
 800353c:	18ed      	addgt	r5, r5, r3
 800353e:	2600      	movs	r6, #0
 8003540:	341a      	adds	r4, #26
 8003542:	42b5      	cmp	r5, r6
 8003544:	d11a      	bne.n	800357c <_printf_common+0xc8>
 8003546:	2000      	movs	r0, #0
 8003548:	e008      	b.n	800355c <_printf_common+0xa8>
 800354a:	2301      	movs	r3, #1
 800354c:	4652      	mov	r2, sl
 800354e:	4649      	mov	r1, r9
 8003550:	4638      	mov	r0, r7
 8003552:	47c0      	blx	r8
 8003554:	3001      	adds	r0, #1
 8003556:	d103      	bne.n	8003560 <_printf_common+0xac>
 8003558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800355c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003560:	3501      	adds	r5, #1
 8003562:	e7c6      	b.n	80034f2 <_printf_common+0x3e>
 8003564:	18e1      	adds	r1, r4, r3
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	2030      	movs	r0, #48	; 0x30
 800356a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800356e:	4422      	add	r2, r4
 8003570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003578:	3302      	adds	r3, #2
 800357a:	e7c7      	b.n	800350c <_printf_common+0x58>
 800357c:	2301      	movs	r3, #1
 800357e:	4622      	mov	r2, r4
 8003580:	4649      	mov	r1, r9
 8003582:	4638      	mov	r0, r7
 8003584:	47c0      	blx	r8
 8003586:	3001      	adds	r0, #1
 8003588:	d0e6      	beq.n	8003558 <_printf_common+0xa4>
 800358a:	3601      	adds	r6, #1
 800358c:	e7d9      	b.n	8003542 <_printf_common+0x8e>
	...

08003590 <_printf_i>:
 8003590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003594:	7e0f      	ldrb	r7, [r1, #24]
 8003596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003598:	2f78      	cmp	r7, #120	; 0x78
 800359a:	4691      	mov	r9, r2
 800359c:	4680      	mov	r8, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	469a      	mov	sl, r3
 80035a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035a6:	d807      	bhi.n	80035b8 <_printf_i+0x28>
 80035a8:	2f62      	cmp	r7, #98	; 0x62
 80035aa:	d80a      	bhi.n	80035c2 <_printf_i+0x32>
 80035ac:	2f00      	cmp	r7, #0
 80035ae:	f000 80d8 	beq.w	8003762 <_printf_i+0x1d2>
 80035b2:	2f58      	cmp	r7, #88	; 0x58
 80035b4:	f000 80a3 	beq.w	80036fe <_printf_i+0x16e>
 80035b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035c0:	e03a      	b.n	8003638 <_printf_i+0xa8>
 80035c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035c6:	2b15      	cmp	r3, #21
 80035c8:	d8f6      	bhi.n	80035b8 <_printf_i+0x28>
 80035ca:	a101      	add	r1, pc, #4	; (adr r1, 80035d0 <_printf_i+0x40>)
 80035cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035d0:	08003629 	.word	0x08003629
 80035d4:	0800363d 	.word	0x0800363d
 80035d8:	080035b9 	.word	0x080035b9
 80035dc:	080035b9 	.word	0x080035b9
 80035e0:	080035b9 	.word	0x080035b9
 80035e4:	080035b9 	.word	0x080035b9
 80035e8:	0800363d 	.word	0x0800363d
 80035ec:	080035b9 	.word	0x080035b9
 80035f0:	080035b9 	.word	0x080035b9
 80035f4:	080035b9 	.word	0x080035b9
 80035f8:	080035b9 	.word	0x080035b9
 80035fc:	08003749 	.word	0x08003749
 8003600:	0800366d 	.word	0x0800366d
 8003604:	0800372b 	.word	0x0800372b
 8003608:	080035b9 	.word	0x080035b9
 800360c:	080035b9 	.word	0x080035b9
 8003610:	0800376b 	.word	0x0800376b
 8003614:	080035b9 	.word	0x080035b9
 8003618:	0800366d 	.word	0x0800366d
 800361c:	080035b9 	.word	0x080035b9
 8003620:	080035b9 	.word	0x080035b9
 8003624:	08003733 	.word	0x08003733
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	602a      	str	r2, [r5, #0]
 8003630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003638:	2301      	movs	r3, #1
 800363a:	e0a3      	b.n	8003784 <_printf_i+0x1f4>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	6829      	ldr	r1, [r5, #0]
 8003640:	0606      	lsls	r6, r0, #24
 8003642:	f101 0304 	add.w	r3, r1, #4
 8003646:	d50a      	bpl.n	800365e <_printf_i+0xce>
 8003648:	680e      	ldr	r6, [r1, #0]
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	2e00      	cmp	r6, #0
 800364e:	da03      	bge.n	8003658 <_printf_i+0xc8>
 8003650:	232d      	movs	r3, #45	; 0x2d
 8003652:	4276      	negs	r6, r6
 8003654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003658:	485e      	ldr	r0, [pc, #376]	; (80037d4 <_printf_i+0x244>)
 800365a:	230a      	movs	r3, #10
 800365c:	e019      	b.n	8003692 <_printf_i+0x102>
 800365e:	680e      	ldr	r6, [r1, #0]
 8003660:	602b      	str	r3, [r5, #0]
 8003662:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003666:	bf18      	it	ne
 8003668:	b236      	sxthne	r6, r6
 800366a:	e7ef      	b.n	800364c <_printf_i+0xbc>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	6820      	ldr	r0, [r4, #0]
 8003670:	1d19      	adds	r1, r3, #4
 8003672:	6029      	str	r1, [r5, #0]
 8003674:	0601      	lsls	r1, r0, #24
 8003676:	d501      	bpl.n	800367c <_printf_i+0xec>
 8003678:	681e      	ldr	r6, [r3, #0]
 800367a:	e002      	b.n	8003682 <_printf_i+0xf2>
 800367c:	0646      	lsls	r6, r0, #25
 800367e:	d5fb      	bpl.n	8003678 <_printf_i+0xe8>
 8003680:	881e      	ldrh	r6, [r3, #0]
 8003682:	4854      	ldr	r0, [pc, #336]	; (80037d4 <_printf_i+0x244>)
 8003684:	2f6f      	cmp	r7, #111	; 0x6f
 8003686:	bf0c      	ite	eq
 8003688:	2308      	moveq	r3, #8
 800368a:	230a      	movne	r3, #10
 800368c:	2100      	movs	r1, #0
 800368e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003692:	6865      	ldr	r5, [r4, #4]
 8003694:	60a5      	str	r5, [r4, #8]
 8003696:	2d00      	cmp	r5, #0
 8003698:	bfa2      	ittt	ge
 800369a:	6821      	ldrge	r1, [r4, #0]
 800369c:	f021 0104 	bicge.w	r1, r1, #4
 80036a0:	6021      	strge	r1, [r4, #0]
 80036a2:	b90e      	cbnz	r6, 80036a8 <_printf_i+0x118>
 80036a4:	2d00      	cmp	r5, #0
 80036a6:	d04d      	beq.n	8003744 <_printf_i+0x1b4>
 80036a8:	4615      	mov	r5, r2
 80036aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80036ae:	fb03 6711 	mls	r7, r3, r1, r6
 80036b2:	5dc7      	ldrb	r7, [r0, r7]
 80036b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036b8:	4637      	mov	r7, r6
 80036ba:	42bb      	cmp	r3, r7
 80036bc:	460e      	mov	r6, r1
 80036be:	d9f4      	bls.n	80036aa <_printf_i+0x11a>
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d10b      	bne.n	80036dc <_printf_i+0x14c>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	07de      	lsls	r6, r3, #31
 80036c8:	d508      	bpl.n	80036dc <_printf_i+0x14c>
 80036ca:	6923      	ldr	r3, [r4, #16]
 80036cc:	6861      	ldr	r1, [r4, #4]
 80036ce:	4299      	cmp	r1, r3
 80036d0:	bfde      	ittt	le
 80036d2:	2330      	movle	r3, #48	; 0x30
 80036d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036dc:	1b52      	subs	r2, r2, r5
 80036de:	6122      	str	r2, [r4, #16]
 80036e0:	f8cd a000 	str.w	sl, [sp]
 80036e4:	464b      	mov	r3, r9
 80036e6:	aa03      	add	r2, sp, #12
 80036e8:	4621      	mov	r1, r4
 80036ea:	4640      	mov	r0, r8
 80036ec:	f7ff fee2 	bl	80034b4 <_printf_common>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d14c      	bne.n	800378e <_printf_i+0x1fe>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f8:	b004      	add	sp, #16
 80036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fe:	4835      	ldr	r0, [pc, #212]	; (80037d4 <_printf_i+0x244>)
 8003700:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003704:	6829      	ldr	r1, [r5, #0]
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	f851 6b04 	ldr.w	r6, [r1], #4
 800370c:	6029      	str	r1, [r5, #0]
 800370e:	061d      	lsls	r5, r3, #24
 8003710:	d514      	bpl.n	800373c <_printf_i+0x1ac>
 8003712:	07df      	lsls	r7, r3, #31
 8003714:	bf44      	itt	mi
 8003716:	f043 0320 	orrmi.w	r3, r3, #32
 800371a:	6023      	strmi	r3, [r4, #0]
 800371c:	b91e      	cbnz	r6, 8003726 <_printf_i+0x196>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	f023 0320 	bic.w	r3, r3, #32
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	2310      	movs	r3, #16
 8003728:	e7b0      	b.n	800368c <_printf_i+0xfc>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	f043 0320 	orr.w	r3, r3, #32
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	2378      	movs	r3, #120	; 0x78
 8003734:	4828      	ldr	r0, [pc, #160]	; (80037d8 <_printf_i+0x248>)
 8003736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800373a:	e7e3      	b.n	8003704 <_printf_i+0x174>
 800373c:	0659      	lsls	r1, r3, #25
 800373e:	bf48      	it	mi
 8003740:	b2b6      	uxthmi	r6, r6
 8003742:	e7e6      	b.n	8003712 <_printf_i+0x182>
 8003744:	4615      	mov	r5, r2
 8003746:	e7bb      	b.n	80036c0 <_printf_i+0x130>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	6826      	ldr	r6, [r4, #0]
 800374c:	6961      	ldr	r1, [r4, #20]
 800374e:	1d18      	adds	r0, r3, #4
 8003750:	6028      	str	r0, [r5, #0]
 8003752:	0635      	lsls	r5, r6, #24
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	d501      	bpl.n	800375c <_printf_i+0x1cc>
 8003758:	6019      	str	r1, [r3, #0]
 800375a:	e002      	b.n	8003762 <_printf_i+0x1d2>
 800375c:	0670      	lsls	r0, r6, #25
 800375e:	d5fb      	bpl.n	8003758 <_printf_i+0x1c8>
 8003760:	8019      	strh	r1, [r3, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	6123      	str	r3, [r4, #16]
 8003766:	4615      	mov	r5, r2
 8003768:	e7ba      	b.n	80036e0 <_printf_i+0x150>
 800376a:	682b      	ldr	r3, [r5, #0]
 800376c:	1d1a      	adds	r2, r3, #4
 800376e:	602a      	str	r2, [r5, #0]
 8003770:	681d      	ldr	r5, [r3, #0]
 8003772:	6862      	ldr	r2, [r4, #4]
 8003774:	2100      	movs	r1, #0
 8003776:	4628      	mov	r0, r5
 8003778:	f7fc fd2a 	bl	80001d0 <memchr>
 800377c:	b108      	cbz	r0, 8003782 <_printf_i+0x1f2>
 800377e:	1b40      	subs	r0, r0, r5
 8003780:	6060      	str	r0, [r4, #4]
 8003782:	6863      	ldr	r3, [r4, #4]
 8003784:	6123      	str	r3, [r4, #16]
 8003786:	2300      	movs	r3, #0
 8003788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800378c:	e7a8      	b.n	80036e0 <_printf_i+0x150>
 800378e:	6923      	ldr	r3, [r4, #16]
 8003790:	462a      	mov	r2, r5
 8003792:	4649      	mov	r1, r9
 8003794:	4640      	mov	r0, r8
 8003796:	47d0      	blx	sl
 8003798:	3001      	adds	r0, #1
 800379a:	d0ab      	beq.n	80036f4 <_printf_i+0x164>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	079b      	lsls	r3, r3, #30
 80037a0:	d413      	bmi.n	80037ca <_printf_i+0x23a>
 80037a2:	68e0      	ldr	r0, [r4, #12]
 80037a4:	9b03      	ldr	r3, [sp, #12]
 80037a6:	4298      	cmp	r0, r3
 80037a8:	bfb8      	it	lt
 80037aa:	4618      	movlt	r0, r3
 80037ac:	e7a4      	b.n	80036f8 <_printf_i+0x168>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4632      	mov	r2, r6
 80037b2:	4649      	mov	r1, r9
 80037b4:	4640      	mov	r0, r8
 80037b6:	47d0      	blx	sl
 80037b8:	3001      	adds	r0, #1
 80037ba:	d09b      	beq.n	80036f4 <_printf_i+0x164>
 80037bc:	3501      	adds	r5, #1
 80037be:	68e3      	ldr	r3, [r4, #12]
 80037c0:	9903      	ldr	r1, [sp, #12]
 80037c2:	1a5b      	subs	r3, r3, r1
 80037c4:	42ab      	cmp	r3, r5
 80037c6:	dcf2      	bgt.n	80037ae <_printf_i+0x21e>
 80037c8:	e7eb      	b.n	80037a2 <_printf_i+0x212>
 80037ca:	2500      	movs	r5, #0
 80037cc:	f104 0619 	add.w	r6, r4, #25
 80037d0:	e7f5      	b.n	80037be <_printf_i+0x22e>
 80037d2:	bf00      	nop
 80037d4:	0800420a 	.word	0x0800420a
 80037d8:	0800421b 	.word	0x0800421b

080037dc <_sbrk_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d06      	ldr	r5, [pc, #24]	; (80037f8 <_sbrk_r+0x1c>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fd f818 	bl	800081c <_sbrk>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_sbrk_r+0x1a>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_sbrk_r+0x1a>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	200001ac 	.word	0x200001ac

080037fc <__swbuf_r>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	460e      	mov	r6, r1
 8003800:	4614      	mov	r4, r2
 8003802:	4605      	mov	r5, r0
 8003804:	b118      	cbz	r0, 800380e <__swbuf_r+0x12>
 8003806:	6983      	ldr	r3, [r0, #24]
 8003808:	b90b      	cbnz	r3, 800380e <__swbuf_r+0x12>
 800380a:	f000 f9d9 	bl	8003bc0 <__sinit>
 800380e:	4b21      	ldr	r3, [pc, #132]	; (8003894 <__swbuf_r+0x98>)
 8003810:	429c      	cmp	r4, r3
 8003812:	d12b      	bne.n	800386c <__swbuf_r+0x70>
 8003814:	686c      	ldr	r4, [r5, #4]
 8003816:	69a3      	ldr	r3, [r4, #24]
 8003818:	60a3      	str	r3, [r4, #8]
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	071a      	lsls	r2, r3, #28
 800381e:	d52f      	bpl.n	8003880 <__swbuf_r+0x84>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	b36b      	cbz	r3, 8003880 <__swbuf_r+0x84>
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	6820      	ldr	r0, [r4, #0]
 8003828:	1ac0      	subs	r0, r0, r3
 800382a:	6963      	ldr	r3, [r4, #20]
 800382c:	b2f6      	uxtb	r6, r6
 800382e:	4283      	cmp	r3, r0
 8003830:	4637      	mov	r7, r6
 8003832:	dc04      	bgt.n	800383e <__swbuf_r+0x42>
 8003834:	4621      	mov	r1, r4
 8003836:	4628      	mov	r0, r5
 8003838:	f000 f92e 	bl	8003a98 <_fflush_r>
 800383c:	bb30      	cbnz	r0, 800388c <__swbuf_r+0x90>
 800383e:	68a3      	ldr	r3, [r4, #8]
 8003840:	3b01      	subs	r3, #1
 8003842:	60a3      	str	r3, [r4, #8]
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	6022      	str	r2, [r4, #0]
 800384a:	701e      	strb	r6, [r3, #0]
 800384c:	6963      	ldr	r3, [r4, #20]
 800384e:	3001      	adds	r0, #1
 8003850:	4283      	cmp	r3, r0
 8003852:	d004      	beq.n	800385e <__swbuf_r+0x62>
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	07db      	lsls	r3, r3, #31
 8003858:	d506      	bpl.n	8003868 <__swbuf_r+0x6c>
 800385a:	2e0a      	cmp	r6, #10
 800385c:	d104      	bne.n	8003868 <__swbuf_r+0x6c>
 800385e:	4621      	mov	r1, r4
 8003860:	4628      	mov	r0, r5
 8003862:	f000 f919 	bl	8003a98 <_fflush_r>
 8003866:	b988      	cbnz	r0, 800388c <__swbuf_r+0x90>
 8003868:	4638      	mov	r0, r7
 800386a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <__swbuf_r+0x9c>)
 800386e:	429c      	cmp	r4, r3
 8003870:	d101      	bne.n	8003876 <__swbuf_r+0x7a>
 8003872:	68ac      	ldr	r4, [r5, #8]
 8003874:	e7cf      	b.n	8003816 <__swbuf_r+0x1a>
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <__swbuf_r+0xa0>)
 8003878:	429c      	cmp	r4, r3
 800387a:	bf08      	it	eq
 800387c:	68ec      	ldreq	r4, [r5, #12]
 800387e:	e7ca      	b.n	8003816 <__swbuf_r+0x1a>
 8003880:	4621      	mov	r1, r4
 8003882:	4628      	mov	r0, r5
 8003884:	f000 f80c 	bl	80038a0 <__swsetup_r>
 8003888:	2800      	cmp	r0, #0
 800388a:	d0cb      	beq.n	8003824 <__swbuf_r+0x28>
 800388c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003890:	e7ea      	b.n	8003868 <__swbuf_r+0x6c>
 8003892:	bf00      	nop
 8003894:	0800424c 	.word	0x0800424c
 8003898:	0800426c 	.word	0x0800426c
 800389c:	0800422c 	.word	0x0800422c

080038a0 <__swsetup_r>:
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <__swsetup_r+0xcc>)
 80038a2:	b570      	push	{r4, r5, r6, lr}
 80038a4:	681d      	ldr	r5, [r3, #0]
 80038a6:	4606      	mov	r6, r0
 80038a8:	460c      	mov	r4, r1
 80038aa:	b125      	cbz	r5, 80038b6 <__swsetup_r+0x16>
 80038ac:	69ab      	ldr	r3, [r5, #24]
 80038ae:	b913      	cbnz	r3, 80038b6 <__swsetup_r+0x16>
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 f985 	bl	8003bc0 <__sinit>
 80038b6:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <__swsetup_r+0xd0>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d10f      	bne.n	80038dc <__swsetup_r+0x3c>
 80038bc:	686c      	ldr	r4, [r5, #4]
 80038be:	89a3      	ldrh	r3, [r4, #12]
 80038c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038c4:	0719      	lsls	r1, r3, #28
 80038c6:	d42c      	bmi.n	8003922 <__swsetup_r+0x82>
 80038c8:	06dd      	lsls	r5, r3, #27
 80038ca:	d411      	bmi.n	80038f0 <__swsetup_r+0x50>
 80038cc:	2309      	movs	r3, #9
 80038ce:	6033      	str	r3, [r6, #0]
 80038d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038da:	e03e      	b.n	800395a <__swsetup_r+0xba>
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <__swsetup_r+0xd4>)
 80038de:	429c      	cmp	r4, r3
 80038e0:	d101      	bne.n	80038e6 <__swsetup_r+0x46>
 80038e2:	68ac      	ldr	r4, [r5, #8]
 80038e4:	e7eb      	b.n	80038be <__swsetup_r+0x1e>
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <__swsetup_r+0xd8>)
 80038e8:	429c      	cmp	r4, r3
 80038ea:	bf08      	it	eq
 80038ec:	68ec      	ldreq	r4, [r5, #12]
 80038ee:	e7e6      	b.n	80038be <__swsetup_r+0x1e>
 80038f0:	0758      	lsls	r0, r3, #29
 80038f2:	d512      	bpl.n	800391a <__swsetup_r+0x7a>
 80038f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038f6:	b141      	cbz	r1, 800390a <__swsetup_r+0x6a>
 80038f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038fc:	4299      	cmp	r1, r3
 80038fe:	d002      	beq.n	8003906 <__swsetup_r+0x66>
 8003900:	4630      	mov	r0, r6
 8003902:	f7ff fb9d 	bl	8003040 <_free_r>
 8003906:	2300      	movs	r3, #0
 8003908:	6363      	str	r3, [r4, #52]	; 0x34
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003910:	81a3      	strh	r3, [r4, #12]
 8003912:	2300      	movs	r3, #0
 8003914:	6063      	str	r3, [r4, #4]
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	81a3      	strh	r3, [r4, #12]
 8003922:	6923      	ldr	r3, [r4, #16]
 8003924:	b94b      	cbnz	r3, 800393a <__swsetup_r+0x9a>
 8003926:	89a3      	ldrh	r3, [r4, #12]
 8003928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003930:	d003      	beq.n	800393a <__swsetup_r+0x9a>
 8003932:	4621      	mov	r1, r4
 8003934:	4630      	mov	r0, r6
 8003936:	f000 fa09 	bl	8003d4c <__smakebuf_r>
 800393a:	89a0      	ldrh	r0, [r4, #12]
 800393c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003940:	f010 0301 	ands.w	r3, r0, #1
 8003944:	d00a      	beq.n	800395c <__swsetup_r+0xbc>
 8003946:	2300      	movs	r3, #0
 8003948:	60a3      	str	r3, [r4, #8]
 800394a:	6963      	ldr	r3, [r4, #20]
 800394c:	425b      	negs	r3, r3
 800394e:	61a3      	str	r3, [r4, #24]
 8003950:	6923      	ldr	r3, [r4, #16]
 8003952:	b943      	cbnz	r3, 8003966 <__swsetup_r+0xc6>
 8003954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003958:	d1ba      	bne.n	80038d0 <__swsetup_r+0x30>
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	0781      	lsls	r1, r0, #30
 800395e:	bf58      	it	pl
 8003960:	6963      	ldrpl	r3, [r4, #20]
 8003962:	60a3      	str	r3, [r4, #8]
 8003964:	e7f4      	b.n	8003950 <__swsetup_r+0xb0>
 8003966:	2000      	movs	r0, #0
 8003968:	e7f7      	b.n	800395a <__swsetup_r+0xba>
 800396a:	bf00      	nop
 800396c:	2000000c 	.word	0x2000000c
 8003970:	0800424c 	.word	0x0800424c
 8003974:	0800426c 	.word	0x0800426c
 8003978:	0800422c 	.word	0x0800422c

0800397c <abort>:
 800397c:	b508      	push	{r3, lr}
 800397e:	2006      	movs	r0, #6
 8003980:	f000 fa58 	bl	8003e34 <raise>
 8003984:	2001      	movs	r0, #1
 8003986:	f7fc fed1 	bl	800072c <_exit>
	...

0800398c <__sflush_r>:
 800398c:	898a      	ldrh	r2, [r1, #12]
 800398e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003992:	4605      	mov	r5, r0
 8003994:	0710      	lsls	r0, r2, #28
 8003996:	460c      	mov	r4, r1
 8003998:	d458      	bmi.n	8003a4c <__sflush_r+0xc0>
 800399a:	684b      	ldr	r3, [r1, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	dc05      	bgt.n	80039ac <__sflush_r+0x20>
 80039a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	dc02      	bgt.n	80039ac <__sflush_r+0x20>
 80039a6:	2000      	movs	r0, #0
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ae:	2e00      	cmp	r6, #0
 80039b0:	d0f9      	beq.n	80039a6 <__sflush_r+0x1a>
 80039b2:	2300      	movs	r3, #0
 80039b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039b8:	682f      	ldr	r7, [r5, #0]
 80039ba:	602b      	str	r3, [r5, #0]
 80039bc:	d032      	beq.n	8003a24 <__sflush_r+0x98>
 80039be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	075a      	lsls	r2, r3, #29
 80039c4:	d505      	bpl.n	80039d2 <__sflush_r+0x46>
 80039c6:	6863      	ldr	r3, [r4, #4]
 80039c8:	1ac0      	subs	r0, r0, r3
 80039ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039cc:	b10b      	cbz	r3, 80039d2 <__sflush_r+0x46>
 80039ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039d0:	1ac0      	subs	r0, r0, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	4602      	mov	r2, r0
 80039d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039d8:	6a21      	ldr	r1, [r4, #32]
 80039da:	4628      	mov	r0, r5
 80039dc:	47b0      	blx	r6
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	d106      	bne.n	80039f2 <__sflush_r+0x66>
 80039e4:	6829      	ldr	r1, [r5, #0]
 80039e6:	291d      	cmp	r1, #29
 80039e8:	d82c      	bhi.n	8003a44 <__sflush_r+0xb8>
 80039ea:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <__sflush_r+0x108>)
 80039ec:	40ca      	lsrs	r2, r1
 80039ee:	07d6      	lsls	r6, r2, #31
 80039f0:	d528      	bpl.n	8003a44 <__sflush_r+0xb8>
 80039f2:	2200      	movs	r2, #0
 80039f4:	6062      	str	r2, [r4, #4]
 80039f6:	04d9      	lsls	r1, r3, #19
 80039f8:	6922      	ldr	r2, [r4, #16]
 80039fa:	6022      	str	r2, [r4, #0]
 80039fc:	d504      	bpl.n	8003a08 <__sflush_r+0x7c>
 80039fe:	1c42      	adds	r2, r0, #1
 8003a00:	d101      	bne.n	8003a06 <__sflush_r+0x7a>
 8003a02:	682b      	ldr	r3, [r5, #0]
 8003a04:	b903      	cbnz	r3, 8003a08 <__sflush_r+0x7c>
 8003a06:	6560      	str	r0, [r4, #84]	; 0x54
 8003a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a0a:	602f      	str	r7, [r5, #0]
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	d0ca      	beq.n	80039a6 <__sflush_r+0x1a>
 8003a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a14:	4299      	cmp	r1, r3
 8003a16:	d002      	beq.n	8003a1e <__sflush_r+0x92>
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f7ff fb11 	bl	8003040 <_free_r>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	6360      	str	r0, [r4, #52]	; 0x34
 8003a22:	e7c1      	b.n	80039a8 <__sflush_r+0x1c>
 8003a24:	6a21      	ldr	r1, [r4, #32]
 8003a26:	2301      	movs	r3, #1
 8003a28:	4628      	mov	r0, r5
 8003a2a:	47b0      	blx	r6
 8003a2c:	1c41      	adds	r1, r0, #1
 8003a2e:	d1c7      	bne.n	80039c0 <__sflush_r+0x34>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0c4      	beq.n	80039c0 <__sflush_r+0x34>
 8003a36:	2b1d      	cmp	r3, #29
 8003a38:	d001      	beq.n	8003a3e <__sflush_r+0xb2>
 8003a3a:	2b16      	cmp	r3, #22
 8003a3c:	d101      	bne.n	8003a42 <__sflush_r+0xb6>
 8003a3e:	602f      	str	r7, [r5, #0]
 8003a40:	e7b1      	b.n	80039a6 <__sflush_r+0x1a>
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a48:	81a3      	strh	r3, [r4, #12]
 8003a4a:	e7ad      	b.n	80039a8 <__sflush_r+0x1c>
 8003a4c:	690f      	ldr	r7, [r1, #16]
 8003a4e:	2f00      	cmp	r7, #0
 8003a50:	d0a9      	beq.n	80039a6 <__sflush_r+0x1a>
 8003a52:	0793      	lsls	r3, r2, #30
 8003a54:	680e      	ldr	r6, [r1, #0]
 8003a56:	bf08      	it	eq
 8003a58:	694b      	ldreq	r3, [r1, #20]
 8003a5a:	600f      	str	r7, [r1, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	2300      	movne	r3, #0
 8003a60:	eba6 0807 	sub.w	r8, r6, r7
 8003a64:	608b      	str	r3, [r1, #8]
 8003a66:	f1b8 0f00 	cmp.w	r8, #0
 8003a6a:	dd9c      	ble.n	80039a6 <__sflush_r+0x1a>
 8003a6c:	6a21      	ldr	r1, [r4, #32]
 8003a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a70:	4643      	mov	r3, r8
 8003a72:	463a      	mov	r2, r7
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b0      	blx	r6
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	dc06      	bgt.n	8003a8a <__sflush_r+0xfe>
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a88:	e78e      	b.n	80039a8 <__sflush_r+0x1c>
 8003a8a:	4407      	add	r7, r0
 8003a8c:	eba8 0800 	sub.w	r8, r8, r0
 8003a90:	e7e9      	b.n	8003a66 <__sflush_r+0xda>
 8003a92:	bf00      	nop
 8003a94:	20400001 	.word	0x20400001

08003a98 <_fflush_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	690b      	ldr	r3, [r1, #16]
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	b913      	cbnz	r3, 8003aa8 <_fflush_r+0x10>
 8003aa2:	2500      	movs	r5, #0
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	bd38      	pop	{r3, r4, r5, pc}
 8003aa8:	b118      	cbz	r0, 8003ab2 <_fflush_r+0x1a>
 8003aaa:	6983      	ldr	r3, [r0, #24]
 8003aac:	b90b      	cbnz	r3, 8003ab2 <_fflush_r+0x1a>
 8003aae:	f000 f887 	bl	8003bc0 <__sinit>
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <_fflush_r+0x6c>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	d11b      	bne.n	8003af0 <_fflush_r+0x58>
 8003ab8:	686c      	ldr	r4, [r5, #4]
 8003aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ef      	beq.n	8003aa2 <_fflush_r+0xa>
 8003ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ac4:	07d0      	lsls	r0, r2, #31
 8003ac6:	d404      	bmi.n	8003ad2 <_fflush_r+0x3a>
 8003ac8:	0599      	lsls	r1, r3, #22
 8003aca:	d402      	bmi.n	8003ad2 <_fflush_r+0x3a>
 8003acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ace:	f000 f915 	bl	8003cfc <__retarget_lock_acquire_recursive>
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	f7ff ff59 	bl	800398c <__sflush_r>
 8003ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003adc:	07da      	lsls	r2, r3, #31
 8003ade:	4605      	mov	r5, r0
 8003ae0:	d4e0      	bmi.n	8003aa4 <_fflush_r+0xc>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	059b      	lsls	r3, r3, #22
 8003ae6:	d4dd      	bmi.n	8003aa4 <_fflush_r+0xc>
 8003ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aea:	f000 f908 	bl	8003cfe <__retarget_lock_release_recursive>
 8003aee:	e7d9      	b.n	8003aa4 <_fflush_r+0xc>
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <_fflush_r+0x70>)
 8003af2:	429c      	cmp	r4, r3
 8003af4:	d101      	bne.n	8003afa <_fflush_r+0x62>
 8003af6:	68ac      	ldr	r4, [r5, #8]
 8003af8:	e7df      	b.n	8003aba <_fflush_r+0x22>
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <_fflush_r+0x74>)
 8003afc:	429c      	cmp	r4, r3
 8003afe:	bf08      	it	eq
 8003b00:	68ec      	ldreq	r4, [r5, #12]
 8003b02:	e7da      	b.n	8003aba <_fflush_r+0x22>
 8003b04:	0800424c 	.word	0x0800424c
 8003b08:	0800426c 	.word	0x0800426c
 8003b0c:	0800422c 	.word	0x0800422c

08003b10 <std>:
 8003b10:	2300      	movs	r3, #0
 8003b12:	b510      	push	{r4, lr}
 8003b14:	4604      	mov	r4, r0
 8003b16:	e9c0 3300 	strd	r3, r3, [r0]
 8003b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b1e:	6083      	str	r3, [r0, #8]
 8003b20:	8181      	strh	r1, [r0, #12]
 8003b22:	6643      	str	r3, [r0, #100]	; 0x64
 8003b24:	81c2      	strh	r2, [r0, #14]
 8003b26:	6183      	str	r3, [r0, #24]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	2208      	movs	r2, #8
 8003b2c:	305c      	adds	r0, #92	; 0x5c
 8003b2e:	f7ff f95f 	bl	8002df0 <memset>
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <std+0x38>)
 8003b34:	6263      	str	r3, [r4, #36]	; 0x24
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <std+0x3c>)
 8003b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <std+0x40>)
 8003b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <std+0x44>)
 8003b40:	6224      	str	r4, [r4, #32]
 8003b42:	6323      	str	r3, [r4, #48]	; 0x30
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	08003e6d 	.word	0x08003e6d
 8003b4c:	08003e8f 	.word	0x08003e8f
 8003b50:	08003ec7 	.word	0x08003ec7
 8003b54:	08003eeb 	.word	0x08003eeb

08003b58 <_cleanup_r>:
 8003b58:	4901      	ldr	r1, [pc, #4]	; (8003b60 <_cleanup_r+0x8>)
 8003b5a:	f000 b8af 	b.w	8003cbc <_fwalk_reent>
 8003b5e:	bf00      	nop
 8003b60:	08003a99 	.word	0x08003a99

08003b64 <__sfmoreglue>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	2268      	movs	r2, #104	; 0x68
 8003b68:	1e4d      	subs	r5, r1, #1
 8003b6a:	4355      	muls	r5, r2
 8003b6c:	460e      	mov	r6, r1
 8003b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b72:	f7ff fad1 	bl	8003118 <_malloc_r>
 8003b76:	4604      	mov	r4, r0
 8003b78:	b140      	cbz	r0, 8003b8c <__sfmoreglue+0x28>
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8003b80:	300c      	adds	r0, #12
 8003b82:	60a0      	str	r0, [r4, #8]
 8003b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b88:	f7ff f932 	bl	8002df0 <memset>
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}

08003b90 <__sfp_lock_acquire>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__sfp_lock_acquire+0x8>)
 8003b92:	f000 b8b3 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003b96:	bf00      	nop
 8003b98:	200001a9 	.word	0x200001a9

08003b9c <__sfp_lock_release>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__sfp_lock_release+0x8>)
 8003b9e:	f000 b8ae 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	200001a9 	.word	0x200001a9

08003ba8 <__sinit_lock_acquire>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	; (8003bb0 <__sinit_lock_acquire+0x8>)
 8003baa:	f000 b8a7 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003bae:	bf00      	nop
 8003bb0:	200001aa 	.word	0x200001aa

08003bb4 <__sinit_lock_release>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	; (8003bbc <__sinit_lock_release+0x8>)
 8003bb6:	f000 b8a2 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003bba:	bf00      	nop
 8003bbc:	200001aa 	.word	0x200001aa

08003bc0 <__sinit>:
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	f7ff fff0 	bl	8003ba8 <__sinit_lock_acquire>
 8003bc8:	69a3      	ldr	r3, [r4, #24]
 8003bca:	b11b      	cbz	r3, 8003bd4 <__sinit+0x14>
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd0:	f7ff bff0 	b.w	8003bb4 <__sinit_lock_release>
 8003bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <__sinit+0x68>)
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <__sinit+0x6c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	bf04      	itt	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	61a3      	streq	r3, [r4, #24]
 8003bea:	4620      	mov	r0, r4
 8003bec:	f000 f820 	bl	8003c30 <__sfp>
 8003bf0:	6060      	str	r0, [r4, #4]
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 f81c 	bl	8003c30 <__sfp>
 8003bf8:	60a0      	str	r0, [r4, #8]
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f000 f818 	bl	8003c30 <__sfp>
 8003c00:	2200      	movs	r2, #0
 8003c02:	60e0      	str	r0, [r4, #12]
 8003c04:	2104      	movs	r1, #4
 8003c06:	6860      	ldr	r0, [r4, #4]
 8003c08:	f7ff ff82 	bl	8003b10 <std>
 8003c0c:	68a0      	ldr	r0, [r4, #8]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2109      	movs	r1, #9
 8003c12:	f7ff ff7d 	bl	8003b10 <std>
 8003c16:	68e0      	ldr	r0, [r4, #12]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	2112      	movs	r1, #18
 8003c1c:	f7ff ff78 	bl	8003b10 <std>
 8003c20:	2301      	movs	r3, #1
 8003c22:	61a3      	str	r3, [r4, #24]
 8003c24:	e7d2      	b.n	8003bcc <__sinit+0xc>
 8003c26:	bf00      	nop
 8003c28:	08004044 	.word	0x08004044
 8003c2c:	08003b59 	.word	0x08003b59

08003c30 <__sfp>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	4607      	mov	r7, r0
 8003c34:	f7ff ffac 	bl	8003b90 <__sfp_lock_acquire>
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <__sfp+0x84>)
 8003c3a:	681e      	ldr	r6, [r3, #0]
 8003c3c:	69b3      	ldr	r3, [r6, #24]
 8003c3e:	b913      	cbnz	r3, 8003c46 <__sfp+0x16>
 8003c40:	4630      	mov	r0, r6
 8003c42:	f7ff ffbd 	bl	8003bc0 <__sinit>
 8003c46:	3648      	adds	r6, #72	; 0x48
 8003c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	d503      	bpl.n	8003c58 <__sfp+0x28>
 8003c50:	6833      	ldr	r3, [r6, #0]
 8003c52:	b30b      	cbz	r3, 8003c98 <__sfp+0x68>
 8003c54:	6836      	ldr	r6, [r6, #0]
 8003c56:	e7f7      	b.n	8003c48 <__sfp+0x18>
 8003c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c5c:	b9d5      	cbnz	r5, 8003c94 <__sfp+0x64>
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <__sfp+0x88>)
 8003c60:	60e3      	str	r3, [r4, #12]
 8003c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c66:	6665      	str	r5, [r4, #100]	; 0x64
 8003c68:	f000 f847 	bl	8003cfa <__retarget_lock_init_recursive>
 8003c6c:	f7ff ff96 	bl	8003b9c <__sfp_lock_release>
 8003c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c78:	6025      	str	r5, [r4, #0]
 8003c7a:	61a5      	str	r5, [r4, #24]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c84:	f7ff f8b4 	bl	8002df0 <memset>
 8003c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c90:	4620      	mov	r0, r4
 8003c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c94:	3468      	adds	r4, #104	; 0x68
 8003c96:	e7d9      	b.n	8003c4c <__sfp+0x1c>
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	f7ff ff62 	bl	8003b64 <__sfmoreglue>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	6030      	str	r0, [r6, #0]
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d1d5      	bne.n	8003c54 <__sfp+0x24>
 8003ca8:	f7ff ff78 	bl	8003b9c <__sfp_lock_release>
 8003cac:	230c      	movs	r3, #12
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	e7ee      	b.n	8003c90 <__sfp+0x60>
 8003cb2:	bf00      	nop
 8003cb4:	08004044 	.word	0x08004044
 8003cb8:	ffff0001 	.word	0xffff0001

08003cbc <_fwalk_reent>:
 8003cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	4688      	mov	r8, r1
 8003cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cc8:	2700      	movs	r7, #0
 8003cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cce:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd2:	d505      	bpl.n	8003ce0 <_fwalk_reent+0x24>
 8003cd4:	6824      	ldr	r4, [r4, #0]
 8003cd6:	2c00      	cmp	r4, #0
 8003cd8:	d1f7      	bne.n	8003cca <_fwalk_reent+0xe>
 8003cda:	4638      	mov	r0, r7
 8003cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce0:	89ab      	ldrh	r3, [r5, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d907      	bls.n	8003cf6 <_fwalk_reent+0x3a>
 8003ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cea:	3301      	adds	r3, #1
 8003cec:	d003      	beq.n	8003cf6 <_fwalk_reent+0x3a>
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	47c0      	blx	r8
 8003cf4:	4307      	orrs	r7, r0
 8003cf6:	3568      	adds	r5, #104	; 0x68
 8003cf8:	e7e9      	b.n	8003cce <_fwalk_reent+0x12>

08003cfa <__retarget_lock_init_recursive>:
 8003cfa:	4770      	bx	lr

08003cfc <__retarget_lock_acquire_recursive>:
 8003cfc:	4770      	bx	lr

08003cfe <__retarget_lock_release_recursive>:
 8003cfe:	4770      	bx	lr

08003d00 <__swhatbuf_r>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	460e      	mov	r6, r1
 8003d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	b096      	sub	sp, #88	; 0x58
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	da08      	bge.n	8003d24 <__swhatbuf_r+0x24>
 8003d12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	602a      	str	r2, [r5, #0]
 8003d1a:	061a      	lsls	r2, r3, #24
 8003d1c:	d410      	bmi.n	8003d40 <__swhatbuf_r+0x40>
 8003d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d22:	e00e      	b.n	8003d42 <__swhatbuf_r+0x42>
 8003d24:	466a      	mov	r2, sp
 8003d26:	f000 f907 	bl	8003f38 <_fstat_r>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	dbf1      	blt.n	8003d12 <__swhatbuf_r+0x12>
 8003d2e:	9a01      	ldr	r2, [sp, #4]
 8003d30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d38:	425a      	negs	r2, r3
 8003d3a:	415a      	adcs	r2, r3
 8003d3c:	602a      	str	r2, [r5, #0]
 8003d3e:	e7ee      	b.n	8003d1e <__swhatbuf_r+0x1e>
 8003d40:	2340      	movs	r3, #64	; 0x40
 8003d42:	2000      	movs	r0, #0
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	b016      	add	sp, #88	; 0x58
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d4c <__smakebuf_r>:
 8003d4c:	898b      	ldrh	r3, [r1, #12]
 8003d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d50:	079d      	lsls	r5, r3, #30
 8003d52:	4606      	mov	r6, r0
 8003d54:	460c      	mov	r4, r1
 8003d56:	d507      	bpl.n	8003d68 <__smakebuf_r+0x1c>
 8003d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	2301      	movs	r3, #1
 8003d62:	6163      	str	r3, [r4, #20]
 8003d64:	b002      	add	sp, #8
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	ab01      	add	r3, sp, #4
 8003d6a:	466a      	mov	r2, sp
 8003d6c:	f7ff ffc8 	bl	8003d00 <__swhatbuf_r>
 8003d70:	9900      	ldr	r1, [sp, #0]
 8003d72:	4605      	mov	r5, r0
 8003d74:	4630      	mov	r0, r6
 8003d76:	f7ff f9cf 	bl	8003118 <_malloc_r>
 8003d7a:	b948      	cbnz	r0, 8003d90 <__smakebuf_r+0x44>
 8003d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d80:	059a      	lsls	r2, r3, #22
 8003d82:	d4ef      	bmi.n	8003d64 <__smakebuf_r+0x18>
 8003d84:	f023 0303 	bic.w	r3, r3, #3
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	e7e3      	b.n	8003d58 <__smakebuf_r+0xc>
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <__smakebuf_r+0x7c>)
 8003d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	6020      	str	r0, [r4, #0]
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	9b00      	ldr	r3, [sp, #0]
 8003da0:	6163      	str	r3, [r4, #20]
 8003da2:	9b01      	ldr	r3, [sp, #4]
 8003da4:	6120      	str	r0, [r4, #16]
 8003da6:	b15b      	cbz	r3, 8003dc0 <__smakebuf_r+0x74>
 8003da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 f8d5 	bl	8003f5c <_isatty_r>
 8003db2:	b128      	cbz	r0, 8003dc0 <__smakebuf_r+0x74>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	89a0      	ldrh	r0, [r4, #12]
 8003dc2:	4305      	orrs	r5, r0
 8003dc4:	81a5      	strh	r5, [r4, #12]
 8003dc6:	e7cd      	b.n	8003d64 <__smakebuf_r+0x18>
 8003dc8:	08003b59 	.word	0x08003b59

08003dcc <__malloc_lock>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	; (8003dd4 <__malloc_lock+0x8>)
 8003dce:	f7ff bf95 	b.w	8003cfc <__retarget_lock_acquire_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	200001a8 	.word	0x200001a8

08003dd8 <__malloc_unlock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__malloc_unlock+0x8>)
 8003dda:	f7ff bf90 	b.w	8003cfe <__retarget_lock_release_recursive>
 8003dde:	bf00      	nop
 8003de0:	200001a8 	.word	0x200001a8

08003de4 <_raise_r>:
 8003de4:	291f      	cmp	r1, #31
 8003de6:	b538      	push	{r3, r4, r5, lr}
 8003de8:	4604      	mov	r4, r0
 8003dea:	460d      	mov	r5, r1
 8003dec:	d904      	bls.n	8003df8 <_raise_r+0x14>
 8003dee:	2316      	movs	r3, #22
 8003df0:	6003      	str	r3, [r0, #0]
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dfa:	b112      	cbz	r2, 8003e02 <_raise_r+0x1e>
 8003dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e00:	b94b      	cbnz	r3, 8003e16 <_raise_r+0x32>
 8003e02:	4620      	mov	r0, r4
 8003e04:	f000 f830 	bl	8003e68 <_getpid_r>
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e12:	f000 b817 	b.w	8003e44 <_kill_r>
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d00a      	beq.n	8003e30 <_raise_r+0x4c>
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	d103      	bne.n	8003e26 <_raise_r+0x42>
 8003e1e:	2316      	movs	r3, #22
 8003e20:	6003      	str	r3, [r0, #0]
 8003e22:	2001      	movs	r0, #1
 8003e24:	e7e7      	b.n	8003df6 <_raise_r+0x12>
 8003e26:	2400      	movs	r4, #0
 8003e28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	4798      	blx	r3
 8003e30:	2000      	movs	r0, #0
 8003e32:	e7e0      	b.n	8003df6 <_raise_r+0x12>

08003e34 <raise>:
 8003e34:	4b02      	ldr	r3, [pc, #8]	; (8003e40 <raise+0xc>)
 8003e36:	4601      	mov	r1, r0
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	f7ff bfd3 	b.w	8003de4 <_raise_r>
 8003e3e:	bf00      	nop
 8003e40:	2000000c 	.word	0x2000000c

08003e44 <_kill_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4d07      	ldr	r5, [pc, #28]	; (8003e64 <_kill_r+0x20>)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	f7fc fc5b 	bl	800070c <_kill>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	d102      	bne.n	8003e60 <_kill_r+0x1c>
 8003e5a:	682b      	ldr	r3, [r5, #0]
 8003e5c:	b103      	cbz	r3, 8003e60 <_kill_r+0x1c>
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	bd38      	pop	{r3, r4, r5, pc}
 8003e62:	bf00      	nop
 8003e64:	200001ac 	.word	0x200001ac

08003e68 <_getpid_r>:
 8003e68:	f7fc bc48 	b.w	80006fc <_getpid>

08003e6c <__sread>:
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	460c      	mov	r4, r1
 8003e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e74:	f000 f894 	bl	8003fa0 <_read_r>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	bfab      	itete	ge
 8003e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e80:	181b      	addge	r3, r3, r0
 8003e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e86:	bfac      	ite	ge
 8003e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e8a:	81a3      	strhlt	r3, [r4, #12]
 8003e8c:	bd10      	pop	{r4, pc}

08003e8e <__swrite>:
 8003e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e92:	461f      	mov	r7, r3
 8003e94:	898b      	ldrh	r3, [r1, #12]
 8003e96:	05db      	lsls	r3, r3, #23
 8003e98:	4605      	mov	r5, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4616      	mov	r6, r2
 8003e9e:	d505      	bpl.n	8003eac <__swrite+0x1e>
 8003ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f000 f868 	bl	8003f7c <_lseek_r>
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	4632      	mov	r2, r6
 8003eba:	463b      	mov	r3, r7
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec2:	f000 b817 	b.w	8003ef4 <_write_r>

08003ec6 <__sseek>:
 8003ec6:	b510      	push	{r4, lr}
 8003ec8:	460c      	mov	r4, r1
 8003eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ece:	f000 f855 	bl	8003f7c <_lseek_r>
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	bf15      	itete	ne
 8003ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ee2:	81a3      	strheq	r3, [r4, #12]
 8003ee4:	bf18      	it	ne
 8003ee6:	81a3      	strhne	r3, [r4, #12]
 8003ee8:	bd10      	pop	{r4, pc}

08003eea <__sclose>:
 8003eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eee:	f000 b813 	b.w	8003f18 <_close_r>
	...

08003ef4 <_write_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d07      	ldr	r5, [pc, #28]	; (8003f14 <_write_r+0x20>)
 8003ef8:	4604      	mov	r4, r0
 8003efa:	4608      	mov	r0, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7fc fc39 	bl	800077a <_write>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_write_r+0x1e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_write_r+0x1e>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	200001ac 	.word	0x200001ac

08003f18 <_close_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d06      	ldr	r5, [pc, #24]	; (8003f34 <_close_r+0x1c>)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4608      	mov	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fc fc45 	bl	80007b2 <_close>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_close_r+0x1a>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_close_r+0x1a>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	200001ac 	.word	0x200001ac

08003f38 <_fstat_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4d07      	ldr	r5, [pc, #28]	; (8003f58 <_fstat_r+0x20>)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	f7fc fc40 	bl	80007ca <_fstat>
 8003f4a:	1c43      	adds	r3, r0, #1
 8003f4c:	d102      	bne.n	8003f54 <_fstat_r+0x1c>
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	b103      	cbz	r3, 8003f54 <_fstat_r+0x1c>
 8003f52:	6023      	str	r3, [r4, #0]
 8003f54:	bd38      	pop	{r3, r4, r5, pc}
 8003f56:	bf00      	nop
 8003f58:	200001ac 	.word	0x200001ac

08003f5c <_isatty_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d06      	ldr	r5, [pc, #24]	; (8003f78 <_isatty_r+0x1c>)
 8003f60:	2300      	movs	r3, #0
 8003f62:	4604      	mov	r4, r0
 8003f64:	4608      	mov	r0, r1
 8003f66:	602b      	str	r3, [r5, #0]
 8003f68:	f7fc fc3f 	bl	80007ea <_isatty>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_isatty_r+0x1a>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_isatty_r+0x1a>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	200001ac 	.word	0x200001ac

08003f7c <_lseek_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4d07      	ldr	r5, [pc, #28]	; (8003f9c <_lseek_r+0x20>)
 8003f80:	4604      	mov	r4, r0
 8003f82:	4608      	mov	r0, r1
 8003f84:	4611      	mov	r1, r2
 8003f86:	2200      	movs	r2, #0
 8003f88:	602a      	str	r2, [r5, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f7fc fc38 	bl	8000800 <_lseek>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_lseek_r+0x1e>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_lseek_r+0x1e>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	200001ac 	.word	0x200001ac

08003fa0 <_read_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4d07      	ldr	r5, [pc, #28]	; (8003fc0 <_read_r+0x20>)
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	4608      	mov	r0, r1
 8003fa8:	4611      	mov	r1, r2
 8003faa:	2200      	movs	r2, #0
 8003fac:	602a      	str	r2, [r5, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f7fc fbc6 	bl	8000740 <_read>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_read_r+0x1e>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_read_r+0x1e>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	200001ac 	.word	0x200001ac

08003fc4 <_init>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr

08003fd0 <_fini>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr
